{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/baseContract.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\nimport \"./DBContract.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./interfaces/IUser.sol\";\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\nabstract contract baseContract is ContextUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    address constant public BLACK_HOLE = address(0xdead);\n    address immutable public DB_CONTRACT;\n\n    constructor(address dbContract) {\n        DB_CONTRACT = dbContract;\n    }\n\n    modifier onlyLYNKNFTOrDBContract() {\n        require(\n            DBContract(DB_CONTRACT).LYNKNFT() == _msgSender() ||\n            DB_CONTRACT == _msgSender(),\n                'baseContract: caller not the LYNK NFT contract.'\n        );\n        _;\n    }\n\n    modifier onlyLYNKNFTContract() {\n        require(DBContract(DB_CONTRACT).LYNKNFT() == _msgSender(), 'baseContract: caller not the LYNK NFT contract.');\n        _;\n    }\n\n    modifier onlyUserContract() {\n        require(DBContract(DB_CONTRACT).USER_INFO() == _msgSender(), 'baseContract: caller not the User contract.');\n        _;\n    }\n\n    modifier onlyStakingContract() {\n        require(DBContract(DB_CONTRACT).STAKING() == _msgSender(), 'baseContract: caller not the Staking contract.');\n        _;\n    }\n\n    modifier onlyUserOrStakingContract() {\n        require(\n            DBContract(DB_CONTRACT).USER_INFO() == _msgSender() ||\n            DBContract(DB_CONTRACT).STAKING() == _msgSender(),\n                'baseContract: caller not the User OR Staking contract.'\n        );\n        _;\n    }\n\n    function __baseContract_init() internal {\n        __Context_init();\n    }\n\n    function _pay(address _payment, address _payer, uint256 _amount ,IUser.REV_TYPE _type) internal {\n        address target = DBContract(DB_CONTRACT).revADDR(uint256(_type));\n        if (address(0) == _payment) {\n            require(msg.value == _amount, 'baseContract: invalid value.');\n            AddressUpgradeable.sendValue(payable(target), _amount);\n            return;\n        }\n\n        require(\n            IERC20Upgradeable(_payment).allowance(_payer, address(this)) >= _amount,\n            'baseContract: insufficient allowance'\n        );\n\n        IERC20Upgradeable(_payment).safeTransferFrom(_payer, target, _amount);\n\n    }\n    /**\n     * @dev Throws if called by any account other than the operator.\n     */\n    modifier onlyOperator() {\n        require( DBContract(DB_CONTRACT).operator() == _msgSender(), \"baseContract: caller is not the operator\");\n        _;\n    }\n\n}\n"
    },
    "contracts/DBContract.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\nimport \"./interfaces/IUser.sol\";\nimport \"./interfaces/ILYNKNFT.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./interfaces/IUser.sol\";\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\n\ncontract DBContract is OwnableUpgradeable {\n\n\n    /**************************************************************************\n     *****  Common fields  ****************************************************\n     **************************************************************************/\n    address immutable public USDT_TOKEN;\n\n    address public LRT_TOKEN;\n    address public AP_TOKEN;\n    address public STAKING;\n    address public USER_INFO;\n    address public LYNKNFT;\n    address public STAKING_LYNKNFT;\n    address public LISTED_LYNKNFT;\n    address public MARKET;\n    address public TEAM_ADDR;\n    address public operator;\n\n    /**************************************************************************\n     *****  AlynNFT fields  ***************************************************\n     **************************************************************************/\n    uint256[] public mintPrices;\n    uint256 public maxMintPerDayPerAddress;\n    string public baseTokenURI;\n    uint256[][] public attributeLevelThreshold;\n    // @Deprecated\n    uint256 public maxVAAddPerDayPerToken;\n\n    /**************************************************************************\n     *****  Market fields  ****************************************************\n     **************************************************************************/\n    address[] public acceptTokens;\n    uint256 public sellingLevelLimit;\n    uint256 public tradingFee;\n\n    /**************************************************************************\n     *****  User fields  ******************************************************\n     **************************************************************************/\n    address public rootAddress;\n    uint256[] public directRequirements;\n    uint256[] public performanceRequirements;\n    uint256[] public socialRewardRates;\n    uint256 public contributionRewardThreshold;\n    uint256[] public contributionRewardAmounts;\n    uint256 public maxInvitationLevel;\n    mapping(uint256 => uint256[]) public communityRewardRates;\n    uint256 public achievementRewardLevelThreshold;\n    uint256 public achievementRewardDurationThreshold;\n    uint256[] public achievementRewardAmounts;\n\n    /**************************************************************************\n     *****  APToken fields  ***************************************************\n     **************************************************************************/\n    uint256[][] public sellingPackages;\n\n    uint256 public duration;\n\n    uint256[] public maxVAAddPerDayPerTokens;\n    uint256 public performanceThreshold;\n\n    // early bird plan, id range: [startId, endId)\n    uint256 public earlyBirdInitCA;\n    uint256 public earlyBirdMintStartId;\n    uint256 public earlyBirdMintEndId;\n    address public earlyBirdMintPayment;\n    uint256 public earlyBirdMintPriceInPayment;\n    bool public earlyBirdMintEnable;\n    bool public commonMintEnable;\n\n    uint256 public wlNum;\n    mapping(address => bool) public earlyBirdMintWlOf;\n\n    uint256 public lrtPriceInLYNK;\n\n\n    address[] public revADDR;\n\n    /**\n     * @dev Throws if called by any account other than the operator.\n     */\n    modifier onlyOperator() {\n        require(operator == _msgSender(), \"DBContract: caller is not the operator\");\n        _;\n    }\n\n    constructor(address _usdtToken) {\n        USDT_TOKEN = _usdtToken;\n    }\n\n    function __DBContract_init(address[] calldata _addresses) public initializer {\n        __DBContract_init_unchained(_addresses);\n        __Ownable_init();\n    }\n\n    function __DBContract_init_unchained(address[] calldata _addresses) private {\n        _setAddresses(_addresses);\n    }\n\n    function setOperator(address _operator) external onlyOwner {\n        operator = _operator;\n    }\n\n    function setAddresses(address[] calldata _addresses) external onlyOperator {\n        _setAddresses(_addresses);\n    }\n\n\n    /**************************************************************************\n     *****  AlynNFT Manager  **************************************************\n     **************************************************************************/\n    function setMintPrices(uint256[] calldata _mintPrices) external onlyOperator {\n        require(_mintPrices.length == 3, 'DBContract: length mismatch.');\n        delete mintPrices;\n\n        mintPrices = _mintPrices;\n    }\n\n    function setMaxMintPerDayPerAddress(uint256 _maxMintPerDayPerAddress) external onlyOperator {\n        maxMintPerDayPerAddress = _maxMintPerDayPerAddress;\n    }\n\n    function setBaseTokenURI(string calldata _baseTokenURI) external onlyOperator {\n        baseTokenURI = _baseTokenURI;\n    }\n\n    function setEarlyBirdInitCA(uint256 _earlyBirdInitCA) external onlyOperator {\n        earlyBirdInitCA = _earlyBirdInitCA;\n    }\n\n    function setEarlyBirdMintIdRange(uint256 _earlyBirdMintStartId, uint256 _earlyBirdMintEndId) external onlyOperator {\n        require(_earlyBirdMintEndId > _earlyBirdMintStartId, 'DBContract: invalid id range.');\n        earlyBirdMintStartId = _earlyBirdMintStartId;\n        earlyBirdMintEndId = _earlyBirdMintEndId;\n    }\n\n    function setEarlyBirdMintPrice(address _earlyBirdMintPayment, uint256 _earlyBirdMintPriceInPayment) external onlyOperator {\n        require(_earlyBirdMintPayment != address(0), 'DBContract: payment cannot be 0.');\n        earlyBirdMintPayment = _earlyBirdMintPayment;\n        earlyBirdMintPriceInPayment = _earlyBirdMintPriceInPayment;\n    }\n\n    function setSwitch(bool _earlyBirdMintEnable, bool _commonMintEnable) external onlyOperator {\n        earlyBirdMintEnable = _earlyBirdMintEnable;\n        commonMintEnable = _commonMintEnable;\n    }\n\n    function setWlNum(uint256 _wlNum) external onlyOperator {\n        // require(wlNum == 0);\n        wlNum = _wlNum;\n    }\n\n    function setWls(address[] calldata _wls) external onlyOperator {\n        for (uint i = 0; i < _wls.length; i++) {\n            earlyBirdMintWlOf[_wls[i]] = true;\n            if (!IUser(USER_INFO).isValidUser(_wls[i])) {\n                IUser(USER_INFO).registerByEarlyPlan(_wls[i], rootAddress);\n            }\n        }\n    }\n\n    /**\n     * CA: [100, 500, 1000 ... ]\n     */\n    function setAttributeLevelThreshold(ILYNKNFT.Attribute _attr, uint256[] calldata _thresholds) external onlyOperator {\n        require(uint256(_attr) <= attributeLevelThreshold.length, 'DBContract: length mismatch.');\n\n        for (uint256 index; index < _thresholds.length; index++) {\n            if (index > 0) {\n                require(_thresholds[index] >= _thresholds[index - 1], 'DBContract: invalid thresholds.');\n            }\n        }\n\n        if (attributeLevelThreshold.length == uint256(_attr)) {\n            attributeLevelThreshold.push(_thresholds);\n        } else {\n            delete attributeLevelThreshold[uint256(_attr)];\n            attributeLevelThreshold[uint256(_attr)] = _thresholds;\n        }\n    }\n\n    // @Deprecated\n    function setMaxVAAddPerDayPerToken(uint256 _maxVAAddPerDayPerToken) external onlyOperator {\n        maxVAAddPerDayPerToken = _maxVAAddPerDayPerToken;\n    }\n\n    function setMaxVAAddPerDayPerTokens(uint256[] calldata _maxVAAddPerDayPerTokens) external onlyOperator {\n        delete maxVAAddPerDayPerTokens;\n        maxVAAddPerDayPerTokens = _maxVAAddPerDayPerTokens;\n    }\n\n    /**************************************************************************\n     *****  Market Manager  ***************************************************\n     **************************************************************************/\n    function setAcceptToken(address _acceptToken) external onlyOperator {\n        uint256 wlLength = acceptTokens.length;\n        for (uint256 index; index < wlLength; index++) {\n            if (_acceptToken == acceptTokens[index]) return;\n        }\n\n        acceptTokens.push(_acceptToken);\n    }\n\n    function removeAcceptToken(uint256 _index) external onlyOperator {\n        uint256 wlLength = acceptTokens.length;\n        if (_index < acceptTokens.length - 1)\n            acceptTokens[_index] = acceptTokens[wlLength - 1];\n        acceptTokens.pop();\n    }\n\n    function setSellingLevelLimit(uint256 _sellingLevelLimit) external onlyOperator {\n        sellingLevelLimit = _sellingLevelLimit;\n    }\n\n    // e.g. 100% = 1e18\n    function setTradingFee(uint256 _tradingFee) external onlyOperator {\n        require(_tradingFee <= 1e18, 'DBContract: too large.');\n        tradingFee = _tradingFee;\n    }\n\n    /**************************************************************************\n     *****  User Manager  *****************************************************\n     **************************************************************************/\n    function setRootAddress(address _rootAddress) external onlyOperator {\n        require(_rootAddress != address(0), 'DBContract: root cannot be zero address.');\n\n        rootAddress = _rootAddress;\n    }\n\n    function setDirectRequirements(uint256[] calldata _requirements) external onlyOperator {\n        require(_requirements.length == uint256(type(IUser.Level).max), 'DBContract: length mismatch.');\n\n        delete directRequirements;\n        directRequirements = _requirements;\n    }\n\n    function setPerformanceRequirements(uint256[] calldata _requirements) external onlyOperator {\n        require(_requirements.length == uint256(type(IUser.Level).max), 'DBContract: length mismatch.');\n\n        delete performanceRequirements;\n        performanceRequirements = _requirements;\n    }\n\n    function setPerformanceThreshold(uint256 _performanceThreshold) external onlyOperator {\n        performanceThreshold = _performanceThreshold;\n    }\n\n    // e.g. 100% = 1e18\n    function setSocialRewardRates(uint256[] calldata _rates) external onlyOperator {\n        require(_rates.length == uint256(type(IUser.Level).max) + 1, 'DBContract: length mismatch.');\n\n        delete socialRewardRates;\n        for (uint256 index; index < _rates.length; index++) {\n            require(_rates[index] <= 1e18, 'DBContract: too large.');\n        }\n\n        socialRewardRates = _rates;\n    }\n\n    function setContributionRewardThreshold(uint256 _contributionRewardThreshold) external onlyOperator {\n        contributionRewardThreshold = _contributionRewardThreshold;\n    }\n\n    function setContributionRewardAmounts(uint256[] calldata _amounts) external onlyOperator {\n        require(_amounts.length == uint256(type(IUser.Level).max) + 1, 'DBContract: length mismatch.');\n\n        delete contributionRewardAmounts;\n        contributionRewardAmounts = _amounts;\n    }\n\n    function setCommunityRewardRates(IUser.Level _level, uint256[] calldata _rates) external onlyOperator {\n        uint256 levelUint = uint256(_level);\n\n        delete communityRewardRates[levelUint];\n\n        if (_rates.length > maxInvitationLevel) {\n            maxInvitationLevel = _rates.length;\n        }\n        communityRewardRates[levelUint] = _rates;\n    }\n\n    function setAchievementRewardDurationThreshold(uint256 _achievementRewardDurationThreshold) external onlyOperator {\n        achievementRewardDurationThreshold = _achievementRewardDurationThreshold;\n    }\n\n    function setAchievementRewardLevelThreshold(uint256 _achievementRewardLevelThreshold) external onlyOperator {\n        achievementRewardLevelThreshold = _achievementRewardLevelThreshold;\n    }\n\n    function setAchievementRewardAmounts(uint256[] calldata _amounts) external onlyOperator {\n        require(_amounts.length == uint256(type(IUser.Level).max) + 1, 'DBContract: length mismatch.');\n\n        delete achievementRewardAmounts;\n        achievementRewardAmounts = _amounts;\n    }\n\n    /**************************************************************************\n     *****  APToken Manager  **************************************************\n     **************************************************************************/\n    function setSellingPackage(uint256[][] calldata _packages) external onlyOperator {\n        delete sellingPackages;\n\n        for (uint256 index; index < _packages.length; index++) {\n            require(_packages[index].length == 3, 'DBContract: length mismatch.');\n\n            sellingPackages.push(_packages[index]);\n        }\n    }\n\n    function setDuration(uint256 _duration) external onlyOperator {\n        duration = _duration;\n    }\n\n    function setLRTPriceInLYNK(uint256 _lrtPriceInLYNK) external onlyOperator {\n        lrtPriceInLYNK = _lrtPriceInLYNK;\n    }\n\n    /**************************************************************************\n     *****  public view  ******************************************************\n     **************************************************************************/\n    function calcTokenLevel(uint256 _tokenId) external view returns (uint256 level) {\n        return _calcTokenLevel(_tokenId);\n    }\n\n    function calcLevel(ILYNKNFT.Attribute _attr, uint256 _point) external view returns (uint256 level, uint256 overflow) {\n        return _calcLevel(_attr, _point);\n    }\n\n    function acceptTokenLength() external view returns (uint256) {\n        return acceptTokens.length;\n    }\n\n    function isAcceptToken(address _token) external view returns (bool) {\n        uint256 wlLength = acceptTokens.length;\n        for (uint256 index; index < wlLength; index++) {\n            if (_token == acceptTokens[index]) return true;\n        }\n\n        return false;\n    }\n\n    function packageLength() external view returns (uint256) {\n        return sellingPackages.length;\n    }\n\n    function packageByIndex(uint256 _index) external view returns (uint256[] memory) {\n        require(_index < sellingPackages.length, 'DBContract: index out of bounds.');\n\n        return sellingPackages[_index];\n    }\n\n    function communityRewardRate(IUser.Level _level, uint256 _invitationLevel) external view returns (uint256) {\n        if (communityRewardRates[uint256(_level)].length > _invitationLevel) {\n            return communityRewardRates[uint256(_level)][_invitationLevel];\n        }\n\n        return 0;\n    }\n\n    function hasAchievementReward(uint256 _nftId) external view returns (bool) {\n        return _calcTokenLevel(_nftId) >= achievementRewardLevelThreshold;\n    }\n\n    function _calcTokenLevel(uint256 _tokenId) private view returns (uint256 level) {\n        require(ILYNKNFT(LYNKNFT).exists(_tokenId), 'DBContract: invalid token ID.');\n\n        uint256[] memory _nftInfo = ILYNKNFT(LYNKNFT).nftInfoOf(_tokenId);\n        for (uint256 index; index < uint256(type(ILYNKNFT.Attribute).max) + 1; index++) {\n            (uint256 levelSingleAttr,) = _calcLevel(ILYNKNFT.Attribute(index), _nftInfo[index]);\n            if (index == 0 || levelSingleAttr < level) {\n                level = levelSingleAttr;\n            }\n        }\n\n        return level;\n    }\n\n    function _calcLevel(ILYNKNFT.Attribute _attr, uint256 _point) private view returns (uint256 level, uint256 overflow) {\n        level = 0;\n        overflow = _point;\n        uint256 thresholdLength = attributeLevelThreshold[uint256(_attr)].length;\n        for (uint256 index; index < thresholdLength; index++) {\n            if (_point >= attributeLevelThreshold[uint256(_attr)][index]) {\n                level = index + 1;\n                overflow = _point - attributeLevelThreshold[uint256(_attr)][index];\n            } else {\n                break;\n            }\n        }\n        return (level, overflow);\n    }\n\n    function _setAddresses(address[] calldata _addresses) private {\n        require(_addresses.length == 9, 'DBContract: addresses length mismatch.');\n\n        LRT_TOKEN           = _addresses[0];\n        AP_TOKEN            = _addresses[1];\n        STAKING             = _addresses[2];\n        LYNKNFT             = _addresses[3];\n        STAKING_LYNKNFT     = _addresses[4];\n        LISTED_LYNKNFT      = _addresses[5];\n        MARKET              = _addresses[6];\n        USER_INFO           = _addresses[7];\n        TEAM_ADDR           = _addresses[8];\n    }\n\n    function mintPricesNum() external view returns (uint256) {\n        return mintPrices.length;\n    }\n\n    function attributeLevelThresholdNum() external view returns (uint256) {\n        return attributeLevelThreshold.length;\n    }\n\n    function attributeLevelThresholdNumByIndex(uint256 index) external view returns (uint256) {\n        return attributeLevelThreshold.length > index ? attributeLevelThreshold[index].length : 0;\n    }\n\n    function directRequirementsNum() external view returns (uint256) {\n        return directRequirements.length;\n    }\n\n    function performanceRequirementsNum() external view returns (uint256) {\n        return performanceRequirements.length;\n    }\n\n    function socialRewardRatesNum() external view returns (uint256) {\n        return socialRewardRates.length;\n    }\n\n    function contributionRewardAmountsNum() external view returns (uint256) {\n        return contributionRewardAmounts.length;\n    }\n\n    function communityRewardRatesNumByLevel(IUser.Level _level) external view returns (uint256) {\n        return communityRewardRates[uint256(_level)].length;\n    }\n\n    function achievementRewardAmountsNum() external view returns (uint256) {\n        return achievementRewardAmounts.length;\n    }\n\n    function maxVAAddPerDayPerTokensNum() external view returns (uint256) {\n        return maxVAAddPerDayPerTokens.length;\n    }\n\n    function maxVAAddPerDayByTokenId(uint256 _tokenId) external view returns (uint256) {\n        uint256 tokenLevel = _calcTokenLevel(_tokenId);\n        if (tokenLevel > maxVAAddPerDayPerTokens.length - 1) return 0;\n\n        return maxVAAddPerDayPerTokens[tokenLevel];\n    }\n\n    function earlyBirdMintIdRange() external view returns (uint256, uint256) {\n        return (earlyBirdMintStartId, earlyBirdMintEndId);\n    }\n\n    function earlyBirdMintPrice() external view returns (address, uint256) {\n        return (earlyBirdMintPayment, earlyBirdMintPriceInPayment);\n    }\n\n    function setRevAddr(address[] calldata _addr_ls) external onlyOperator {\n        require(_addr_ls.length ==  6 , 'RevAddr length mismatch.');\n        for (uint i = 0; i < 6; i++) {\n            revADDR[i] = _addr_ls[i];\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ILYNKNFT.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\ninterface ILYNKNFT {\n\n    enum Attribute {\n        charisma,\n        vitality,\n        intellect,\n        dexterity\n    }\n\n    function nftInfoOf(uint256 tokenId)\n        external\n        view\n        returns (uint256[] memory _nftInfo);\n\n    function exists(uint256 tokenId) external view returns (bool);\n\n}"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.9;\r\n\r\ninterface IOracle {\r\n    function update() external;\r\n\r\n    function consult(address token, uint256 amountIn)\r\n        external\r\n        view\r\n        returns (uint256 amountOut);\r\n}"
    },
    "contracts/interfaces/ISwapPair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.9;\r\n\r\ninterface ISwapPair {\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "contracts/interfaces/IUser.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\ninterface IUser {\n    enum REV_TYPE { MINT_NFT_ADDR, LRT_ADDR, AP_ADDR,LYNK_ADDR,UP_CA_ADDR,MARKET_ADDR,USDT_ADDR }\n    enum Level {\n        elite,\n        epic,\n        master,\n        legendary,\n        mythic,\n        divine\n    }\n\n    function isValidUser(address _userAddr) view external returns (bool);\n\n    function hookByUpgrade(address _userAddr, uint256 _performance) external;\n    function hookByClaimReward(address _userAddr, uint256 _rewardAmount) external;\n    function hookByStake(uint256 nftId) external;\n    function hookByUnStake(uint256 nftId) external;\n    function registerByEarlyPlan(address _userAddr, address _refAddr) external;\n\n}\n"
    },
    "contracts/libraries/Babylonian.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.9;\r\n\r\nlibrary Babylonian {\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        // else z = 0\r\n    }\r\n}"
    },
    "contracts/libraries/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.9;\r\n\r\nimport {Babylonian} from './Babylonian.sol';\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\r\n    uint256 private constant Q224 = Q112 << RESOLUTION;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function div(uq112x112 memory self, uint112 x)\r\n        internal\r\n        pure\r\n        returns (uq112x112 memory)\r\n    {\r\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\r\n        return uq112x112(self._x / uint224(x));\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uq144x112 memory)\r\n    {\r\n        uint256 z;\r\n        require(\r\n            y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x),\r\n            'FixedPoint: MULTIPLICATION_OVERFLOW'\r\n        );\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator)\r\n        internal\r\n        pure\r\n        returns (uq112x112 memory)\r\n    {\r\n        require(denominator > 0, 'FixedPoint: DIV_BY_ZERO');\r\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // take the reciprocal of a UQ112x112\r\n    function reciprocal(uq112x112 memory self)\r\n        internal\r\n        pure\r\n        returns (uq112x112 memory)\r\n    {\r\n        require(self._x != 0, 'FixedPoint: ZERO_RECIPROCAL');\r\n        return uq112x112(uint224(Q224 / self._x));\r\n    }\r\n\r\n    // square root of a UQ112x112\r\n    function sqrt(uq112x112 memory self)\r\n        internal\r\n        pure\r\n        returns (uq112x112 memory)\r\n    {\r\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/UniswapV2OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.9;\r\n\r\nimport {FixedPoint} from './FixedPoint.sol';\r\nimport {ISwapPair} from '../interfaces/ISwapPair.sol';\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(\r\n        address pair\r\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = ISwapPair(pair).price0CumulativeLast();\r\n        price1Cumulative = ISwapPair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = ISwapPair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n        }\r\n    }\r\n}"
    },
    "contracts/Oracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.9;\r\n\r\nimport {Babylonian} from './libraries/Babylonian.sol';\r\nimport {FixedPoint} from './libraries/FixedPoint.sol';\r\nimport {UniswapV2OracleLibrary} from './libraries/UniswapV2OracleLibrary.sol';\r\nimport {ISwapPair} from './interfaces/ISwapPair.sol';\r\n\r\ncontract Oracle {\r\n\r\n    using FixedPoint for *;\r\n\r\n    address public admin;\r\n\r\n    uint256 public PERIOD = 10 minutes;\r\n\r\n    ISwapPair public pair;\r\n    address public token0;\r\n    address public token1;\r\n\r\n    uint256 public price0CumulativeLast;\r\n    uint256 public price1CumulativeLast;\r\n    uint32 public blockTimestampLast;\r\n    FixedPoint.uq112x112 public price0Average;\r\n    FixedPoint.uq112x112 public price1Average;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function init(address _pair) external {\r\n        require(msg.sender == admin, \"not admin\");\r\n        pair = ISwapPair(_pair);\r\n        token0 = pair.token0();\r\n        token1 = pair.token1();\r\n        price0CumulativeLast = pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\r\n        price1CumulativeLast = pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\r\n        uint112 reserve0;\r\n        uint112 reserve1;\r\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\r\n        require(reserve0 != 0 && reserve1 != 0, 'Oracle: NO_RESERVES'); // ensure that there's liquidity in the pair\r\n    }\r\n\r\n    function setPeriod(uint256 _period) external {\r\n        require(msg.sender == admin, \"not admin\");\r\n        PERIOD = _period;\r\n    }\r\n\r\n    /** @dev Updates 1-day EMA price from Uniswap.  */\r\n    function update() external {\r\n        (\r\n            uint256 price0Cumulative,\r\n            uint256 price1Cumulative,\r\n            uint32 blockTimestamp\r\n        ) = UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n\r\n        if (timeElapsed < PERIOD) {\r\n            // doesn't need to be updated, since a minimum period is not elapsed yet\r\n            return;\r\n        }\r\n\r\n        // overflow is desired, casting never truncates\r\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\r\n        price0Average = FixedPoint.uq112x112(\r\n            uint224((price0Cumulative - price0CumulativeLast) / timeElapsed)\r\n        );\r\n        price1Average = FixedPoint.uq112x112(\r\n            uint224((price1Cumulative - price1CumulativeLast) / timeElapsed)\r\n        );\r\n\r\n        price0CumulativeLast = price0Cumulative;\r\n        price1CumulativeLast = price1Cumulative;\r\n        blockTimestampLast = blockTimestamp;\r\n\r\n        emit Updated(price0Cumulative, price1Cumulative);\r\n    }\r\n\r\n    // note this will always return 0 before update has been called successfully for the first time.\r\n    function consult(address token, uint256 amountIn)\r\n        external\r\n        view\r\n        returns (uint144 amountOut)\r\n    {\r\n        if (token == token0) {\r\n            amountOut = price0Average.mul(amountIn).decode144();\r\n        } else {\r\n            require(token == token1, 'Oracle: INVALID_TOKEN');\r\n            amountOut = price1Average.mul(amountIn).decode144();\r\n        }\r\n    }\r\n\r\n    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\r\n}"
    },
    "contracts/Swap.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.9;\n\nimport \"./baseContract.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./interfaces/IOracle.sol\";\nimport {SafeMath} from '@openzeppelin/contracts/utils/math/SafeMath.sol';\nimport \"./interfaces/IUser.sol\";\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Swap is baseContract, ReentrancyGuardUpgradeable {\n    using SafeMath for uint256;\n    address public lynkAddress;\n    address public oracleAddress;\n    uint256 public lynkPriceOne = 10**18;\n    event SwapEvent(address indexed account, uint256 amountIn,uint256 _amountOut);\n\n\n    constructor(address dbContract) baseContract(dbContract) {\n\n    }\n\n     modifier updatePrice {\n        _;\n        _updateCashPrice();\n    }\n\n    function _updateCashPrice() internal {\n        try IOracle(oracleAddress).update() {} catch {}\n    }\n\n    function __Swap_init() public initializer {\n        __baseContract_init();\n        __Swap_init_unchained();\n        __ReentrancyGuard_init();\n    }\n\n    function __Swap_init_unchained() private {\n    }\n\n\n    function setOracleAddress(address _oracleAddress) external {\n        require(_msgSender() == DBContract(DB_CONTRACT).operator());\n        oracleAddress = _oracleAddress;\n    }\n\n    function setLYNKAddress(address _lynkAddress) external {\n        require(_msgSender() == DBContract(DB_CONTRACT).operator());\n        lynkAddress = _lynkAddress;\n    }\n\n    function getSwapOut(uint256 _amountIn) public view returns(uint256) {\n\n        uint256 priceInLYNK = IOracle(oracleAddress).consult(lynkAddress, lynkPriceOne);\n\n        uint256 _amountOut = 0;\n\n        if(priceInLYNK>0){\n\n            _amountOut = _amountIn.mul(1e6).div(priceInLYNK);\n\n        }\n\n        return _amountOut;\n    }\n\n    function swap(uint256 _amountIn) external updatePrice nonReentrant {\n\n        address lrtAddress = DBContract(DB_CONTRACT).LRT_TOKEN();\n\n        require(IERC20Upgradeable(lrtAddress).balanceOf(_msgSender()) >= _amountIn, 'insufficient LRT.');\n    \n        uint256 _amountOut = getSwapOut(_amountIn);\n\n        require(_amountOut > 0, 'zero out');\n\n        require(IERC20Upgradeable(lynkAddress).balanceOf(address(this)) >= _amountOut, 'insufficient LYNK.');\n\n        _pay(lrtAddress, _msgSender(), _amountIn,IUser.REV_TYPE.LRT_ADDR);\n        SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(lynkAddress), _msgSender(), _amountOut);\n        emit SwapEvent(_msgSender(),_amountIn,_amountOut);\n        // AddressUpgradeable.sendValue(payable(_msgSender()), _amountOut);\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}