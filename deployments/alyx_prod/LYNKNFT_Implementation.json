{
  "address": "0x96bcf06dfD8dAc1182F2FD7Fc8f1e58EB6db0034",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dbAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "nftInfo",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payment",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ILYNKNFT.Attribute",
          "name": "attr",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "point",
          "type": "uint256"
        }
      ],
      "name": "Upgrade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLACK_HOLE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DB_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__LYNKNFT_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addedVAInfoOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "lastAddedTime",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "addedInDuration",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyBirdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyBirdMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "earlyBirdMintedOf",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyBirdWlCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earlyMintInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_remainNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nextId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "isReverseName",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_payment",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mintInfoOf",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "lastMintTime",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "mintNumInDuration",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_payment",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "mintWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "nftInfoOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_nftInfo",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_refAddress",
          "type": "address"
        }
      ],
      "name": "refEarlyBirdMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ILYNKNFT.Attribute",
          "name": "_attr",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_point",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_payment",
          "type": "address"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ILYNKNFT.Attribute",
          "name": "_attr",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_point",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_payment",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "upgradeWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c16dc2662a8becd987ef1d79fdb0b7ac844f7d37755e9863b06856a89a79d0e",
  "receipt": {
    "to": null,
    "from": "0xAc9f45308C0f52aD3B660E67f1e3fa05fc812531",
    "contractAddress": "0x96bcf06dfD8dAc1182F2FD7Fc8f1e58EB6db0034",
    "transactionIndex": 0,
    "gasUsed": "4522085",
    "logsBloom": "0x
    "blockHash": "0x28c08e243b047eb3167be41bbd7dec6d4867620c593d462a029b24e3490b0176",
    "transactionHash": "0x3c16dc2662a8becd987ef1d79fdb0b7ac844f7d37755e9863b06856a89a79d0e",
    "logs": [],
    "blockNumber": 1695980,
    "cumulativeGasUsed": "4522085",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4917581d5c7101Bae7af433E9e9F01DAD6F04b01"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d7bca6848149a117a51973d2eedaebf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dbAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftInfo\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ILYNKNFT.Attribute\",\"name\":\"attr\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLACK_HOLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DB_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__LYNKNFT_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addedVAInfoOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastAddedTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"addedInDuration\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBirdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBirdMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyBirdMintedOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyBirdWlCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyMintInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"isReverseName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payment\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintInfoOf\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastMintTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"mintNumInDuration\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payment\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mintWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nftInfoOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_nftInfo\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refAddress\",\"type\":\"address\"}],\"name\":\"refEarlyBirdMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ILYNKNFT.Attribute\",\"name\":\"_attr\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_point\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payment\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ILYNKNFT.Attribute\",\"name\":\"_attr\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_point\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payment\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"upgradeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/LYNKNFT.sol\":\"LYNKNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x56035505d62f05f5e5040532b749ab25237f6dd87c7a514614acda96af996751\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/DBContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./interfaces/IUser.sol\\\";\\nimport \\\"./interfaces/ILYNKNFT.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract DBContract is OwnableUpgradeable {\\n\\n    /**************************************************************************\\n     *****  Common fields  ****************************************************\\n     **************************************************************************/\\n    address immutable public USDT_TOKEN;\\n\\n    address public LYNK_TOKEN;\\n    address public AP_TOKEN;\\n    address public STAKING;\\n    address public USER_INFO;\\n    address public LYNKNFT;\\n    address public STAKING_LYNKNFT;\\n    address public LISTED_LYNKNFT;\\n    address public MARKET;\\n    address public TEAM_ADDR;\\n    address public operator;\\n\\n    /**************************************************************************\\n     *****  AlynNFT fields  ***************************************************\\n     **************************************************************************/\\n    uint256[] public mintPrices;\\n    uint256 public maxMintPerDayPerAddress;\\n    string public baseTokenURI;\\n    uint256[][] public attributeLevelThreshold;\\n    // @Deprecated\\n    uint256 public maxVAAddPerDayPerToken;\\n\\n    /**************************************************************************\\n     *****  Market fields  ****************************************************\\n     **************************************************************************/\\n    address[] public acceptTokens;\\n    uint256 public sellingLevelLimit;\\n    uint256 public tradingFee;\\n\\n    /**************************************************************************\\n     *****  User fields  ******************************************************\\n     **************************************************************************/\\n    address public rootAddress;\\n    uint256[] public directRequirements;\\n    uint256[] public performanceRequirements;\\n    uint256[] public socialRewardRates;\\n    uint256 public contributionRewardThreshold;\\n    uint256[] public contributionRewardAmounts;\\n    uint256 public maxInvitationLevel;\\n    mapping(uint256 => uint256[]) public communityRewardRates;\\n    uint256 public achievementRewardLevelThreshold;\\n    uint256 public achievementRewardDurationThreshold;\\n    uint256[] public achievementRewardAmounts;\\n\\n    /**************************************************************************\\n     *****  APToken fields  ***************************************************\\n     **************************************************************************/\\n    uint256[][] public sellingPackages;\\n\\n    uint256 public duration;\\n\\n    uint256[] public maxVAAddPerDayPerTokens;\\n    uint256 public performanceThreshold;\\n\\n    // early bird plan, id range: [startId, endId)\\n    uint256 public earlyBirdInitCA;\\n    uint256 public earlyBirdMintStartId;\\n    uint256 public earlyBirdMintEndId;\\n    address public earlyBirdMintPayment;\\n    uint256 public earlyBirdMintPriceInPayment;\\n    bool public earlyBirdMintEnable;\\n    bool public commonMintEnable;\\n\\n    uint256 public wlNum;\\n    mapping(address => bool) public earlyBirdMintWlOf;\\n\\n    uint256 public lynkPriceInALYX;\\n\\n    /**\\n     * @dev Throws if called by any account other than the operator.\\n     */\\n    modifier onlyOperator() {\\n        require(operator == _msgSender(), \\\"DBContract: caller is not the operator\\\");\\n        _;\\n    }\\n\\n    constructor(address _usdtToken) {\\n        USDT_TOKEN = _usdtToken;\\n    }\\n\\n    function __DBContract_init(address[] calldata _addresses) public initializer {\\n        __DBContract_init_unchained(_addresses);\\n        __Ownable_init();\\n    }\\n\\n    function __DBContract_init_unchained(address[] calldata _addresses) private {\\n        _setAddresses(_addresses);\\n    }\\n\\n    function setOperator(address _operator) external onlyOwner {\\n        operator = _operator;\\n    }\\n\\n    function setAddresses(address[] calldata _addresses) external onlyOperator {\\n        _setAddresses(_addresses);\\n    }\\n\\n\\n    /**************************************************************************\\n     *****  AlynNFT Manager  **************************************************\\n     **************************************************************************/\\n    function setMintPrices(uint256[] calldata _mintPrices) external onlyOperator {\\n        require(_mintPrices.length == 3, 'DBContract: length mismatch.');\\n        delete mintPrices;\\n\\n        mintPrices = _mintPrices;\\n    }\\n\\n    function setMaxMintPerDayPerAddress(uint256 _maxMintPerDayPerAddress) external onlyOperator {\\n        maxMintPerDayPerAddress = _maxMintPerDayPerAddress;\\n    }\\n\\n    function setBaseTokenURI(string calldata _baseTokenURI) external onlyOperator {\\n        baseTokenURI = _baseTokenURI;\\n    }\\n\\n    function setEarlyBirdInitCA(uint256 _earlyBirdInitCA) external onlyOperator {\\n        earlyBirdInitCA = _earlyBirdInitCA;\\n    }\\n\\n    function setEarlyBirdMintIdRange(uint256 _earlyBirdMintStartId, uint256 _earlyBirdMintEndId) external onlyOperator {\\n        require(_earlyBirdMintEndId > _earlyBirdMintStartId, 'DBContract: invalid id range.');\\n        earlyBirdMintStartId = _earlyBirdMintStartId;\\n        earlyBirdMintEndId = _earlyBirdMintEndId;\\n    }\\n\\n    function setEarlyBirdMintPrice(address _earlyBirdMintPayment, uint256 _earlyBirdMintPriceInPayment) external onlyOperator {\\n        require(_earlyBirdMintPayment != address(0), 'DBContract: payment cannot be 0.');\\n        earlyBirdMintPayment = _earlyBirdMintPayment;\\n        earlyBirdMintPriceInPayment = _earlyBirdMintPriceInPayment;\\n    }\\n\\n    function setSwitch(bool _earlyBirdMintEnable, bool _commonMintEnable) external onlyOperator {\\n        earlyBirdMintEnable = _earlyBirdMintEnable;\\n        commonMintEnable = _commonMintEnable;\\n    }\\n\\n    function setWlNum(uint256 _wlNum) external onlyOperator {\\n        // require(wlNum == 0);\\n        wlNum = _wlNum;\\n    }\\n\\n    function setWls(address[] calldata _wls) external onlyOperator {\\n        for (uint i = 0; i < _wls.length; i++) {\\n            earlyBirdMintWlOf[_wls[i]] = true;\\n            if (!IUser(USER_INFO).isValidUser(_wls[i])) {\\n                IUser(USER_INFO).registerByEarlyPlan(_wls[i], rootAddress);   \\n            }\\n        }\\n    }\\n\\n    /**\\n     * CA: [100, 500, 1000 ... ]\\n     */\\n    function setAttributeLevelThreshold(ILYNKNFT.Attribute _attr, uint256[] calldata _thresholds) external onlyOperator {\\n        require(uint256(_attr) <= attributeLevelThreshold.length, 'DBContract: length mismatch.');\\n\\n        for (uint256 index; index < _thresholds.length; index++) {\\n            if (index > 0) {\\n                require(_thresholds[index] >= _thresholds[index - 1], 'DBContract: invalid thresholds.');\\n            }\\n        }\\n\\n        if (attributeLevelThreshold.length == uint256(_attr)) {\\n            attributeLevelThreshold.push(_thresholds);\\n        } else {\\n            delete attributeLevelThreshold[uint256(_attr)];\\n            attributeLevelThreshold[uint256(_attr)] = _thresholds;\\n        }\\n    }\\n\\n    // @Deprecated\\n    function setMaxVAAddPerDayPerToken(uint256 _maxVAAddPerDayPerToken) external onlyOperator {\\n        maxVAAddPerDayPerToken = _maxVAAddPerDayPerToken;\\n    }\\n\\n    function setMaxVAAddPerDayPerTokens(uint256[] calldata _maxVAAddPerDayPerTokens) external onlyOperator {\\n        delete maxVAAddPerDayPerTokens;\\n        maxVAAddPerDayPerTokens = _maxVAAddPerDayPerTokens;\\n    }\\n\\n    /**************************************************************************\\n     *****  Market Manager  ***************************************************\\n     **************************************************************************/\\n    function setAcceptToken(address _acceptToken) external onlyOperator {\\n        uint256 wlLength = acceptTokens.length;\\n        for (uint256 index; index < wlLength; index++) {\\n            if (_acceptToken == acceptTokens[index]) return;\\n        }\\n\\n        acceptTokens.push(_acceptToken);\\n    }\\n\\n    function removeAcceptToken(uint256 _index) external onlyOperator {\\n        uint256 wlLength = acceptTokens.length;\\n        if (_index < acceptTokens.length - 1)\\n            acceptTokens[_index] = acceptTokens[wlLength - 1];\\n        acceptTokens.pop();\\n    }\\n\\n    function setSellingLevelLimit(uint256 _sellingLevelLimit) external onlyOperator {\\n        sellingLevelLimit = _sellingLevelLimit;\\n    }\\n\\n    // e.g. 100% = 1e18\\n    function setTradingFee(uint256 _tradingFee) external onlyOperator {\\n        require(_tradingFee <= 1e18, 'DBContract: too large.');\\n        tradingFee = _tradingFee;\\n    }\\n\\n    /**************************************************************************\\n     *****  User Manager  *****************************************************\\n     **************************************************************************/\\n    function setRootAddress(address _rootAddress) external onlyOperator {\\n        require(_rootAddress != address(0), 'DBContract: root cannot be zero address.');\\n\\n        rootAddress = _rootAddress;\\n    }\\n\\n    function setDirectRequirements(uint256[] calldata _requirements) external onlyOperator {\\n        require(_requirements.length == uint256(type(IUser.Level).max), 'DBContract: length mismatch.');\\n\\n        delete directRequirements;\\n        directRequirements = _requirements;\\n    }\\n\\n    function setPerformanceRequirements(uint256[] calldata _requirements) external onlyOperator {\\n        require(_requirements.length == uint256(type(IUser.Level).max), 'DBContract: length mismatch.');\\n\\n        delete performanceRequirements;\\n        performanceRequirements = _requirements;\\n    }\\n\\n    function setPerformanceThreshold(uint256 _performanceThreshold) external onlyOperator {\\n        performanceThreshold = _performanceThreshold;\\n    }\\n\\n    // e.g. 100% = 1e18\\n    function setSocialRewardRates(uint256[] calldata _rates) external onlyOperator {\\n        require(_rates.length == uint256(type(IUser.Level).max) + 1, 'DBContract: length mismatch.');\\n\\n        delete socialRewardRates;\\n        for (uint256 index; index < _rates.length; index++) {\\n            require(_rates[index] <= 1e18, 'DBContract: too large.');\\n        }\\n\\n        socialRewardRates = _rates;\\n    }\\n\\n    function setContributionRewardThreshold(uint256 _contributionRewardThreshold) external onlyOperator {\\n        contributionRewardThreshold = _contributionRewardThreshold;\\n    }\\n\\n    function setContributionRewardAmounts(uint256[] calldata _amounts) external onlyOperator {\\n        require(_amounts.length == uint256(type(IUser.Level).max) + 1, 'DBContract: length mismatch.');\\n\\n        delete contributionRewardAmounts;\\n        contributionRewardAmounts = _amounts;\\n    }\\n\\n    function setCommunityRewardRates(IUser.Level _level, uint256[] calldata _rates) external onlyOperator {\\n        uint256 levelUint = uint256(_level);\\n\\n        delete communityRewardRates[levelUint];\\n\\n        if (_rates.length > maxInvitationLevel) {\\n            maxInvitationLevel = _rates.length;\\n        }\\n        communityRewardRates[levelUint] = _rates;\\n    }\\n\\n    function setAchievementRewardDurationThreshold(uint256 _achievementRewardDurationThreshold) external onlyOperator {\\n        achievementRewardDurationThreshold = _achievementRewardDurationThreshold;\\n    }\\n\\n    function setAchievementRewardLevelThreshold(uint256 _achievementRewardLevelThreshold) external onlyOperator {\\n        achievementRewardLevelThreshold = _achievementRewardLevelThreshold;\\n    }\\n\\n    function setAchievementRewardAmounts(uint256[] calldata _amounts) external onlyOperator {\\n        require(_amounts.length == uint256(type(IUser.Level).max) + 1, 'DBContract: length mismatch.');\\n\\n        delete achievementRewardAmounts;\\n        achievementRewardAmounts = _amounts;\\n    }\\n\\n    /**************************************************************************\\n     *****  APToken Manager  **************************************************\\n     **************************************************************************/\\n    function setSellingPackage(uint256[][] calldata _packages) external onlyOperator {\\n        delete sellingPackages;\\n\\n        for (uint256 index; index < _packages.length; index++) {\\n            require(_packages[index].length == 3, 'DBContract: length mismatch.');\\n\\n            sellingPackages.push(_packages[index]);\\n        }\\n    }\\n\\n    function setDuration(uint256 _duration) external onlyOperator {\\n        duration = _duration;\\n    }\\n\\n    function setLynkPriceInALYX(uint256 _lynkPriceInALYX) external onlyOperator {\\n        lynkPriceInALYX = _lynkPriceInALYX;\\n    }\\n\\n    /**************************************************************************\\n     *****  public view  ******************************************************\\n     **************************************************************************/\\n    function calcTokenLevel(uint256 _tokenId) external view returns (uint256 level) {\\n        return _calcTokenLevel(_tokenId);\\n    }\\n\\n    function calcLevel(ILYNKNFT.Attribute _attr, uint256 _point) external view returns (uint256 level, uint256 overflow) {\\n        return _calcLevel(_attr, _point);\\n    }\\n\\n    function acceptTokenLength() external view returns (uint256) {\\n        return acceptTokens.length;\\n    }\\n\\n    function isAcceptToken(address _token) external view returns (bool) {\\n        uint256 wlLength = acceptTokens.length;\\n        for (uint256 index; index < wlLength; index++) {\\n            if (_token == acceptTokens[index]) return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function packageLength() external view returns (uint256) {\\n        return sellingPackages.length;\\n    }\\n\\n    function packageByIndex(uint256 _index) external view returns (uint256[] memory) {\\n        require(_index < sellingPackages.length, 'DBContract: index out of bounds.');\\n\\n        return sellingPackages[_index];\\n    }\\n\\n    function communityRewardRate(IUser.Level _level, uint256 _invitationLevel) external view returns (uint256) {\\n        if (communityRewardRates[uint256(_level)].length > _invitationLevel) {\\n            return communityRewardRates[uint256(_level)][_invitationLevel];\\n        }\\n\\n        return 0;\\n    }\\n\\n    function hasAchievementReward(uint256 _nftId) external view returns (bool) {\\n        return _calcTokenLevel(_nftId) >= achievementRewardLevelThreshold;\\n    }\\n\\n    function _calcTokenLevel(uint256 _tokenId) private view returns (uint256 level) {\\n        require(ILYNKNFT(LYNKNFT).exists(_tokenId), 'DBContract: invalid token ID.');\\n\\n        uint256[] memory _nftInfo = ILYNKNFT(LYNKNFT).nftInfoOf(_tokenId);\\n        for (uint256 index; index < uint256(type(ILYNKNFT.Attribute).max) + 1; index++) {\\n            (uint256 levelSingleAttr,) = _calcLevel(ILYNKNFT.Attribute(index), _nftInfo[index]);\\n            if (index == 0 || levelSingleAttr < level) {\\n                level = levelSingleAttr;\\n            }\\n        }\\n\\n        return level;\\n    }\\n\\n    function _calcLevel(ILYNKNFT.Attribute _attr, uint256 _point) private view returns (uint256 level, uint256 overflow) {\\n        level = 0;\\n        overflow = _point;\\n        uint256 thresholdLength = attributeLevelThreshold[uint256(_attr)].length;\\n        for (uint256 index; index < thresholdLength; index++) {\\n            if (_point >= attributeLevelThreshold[uint256(_attr)][index]) {\\n                level = index + 1;\\n                overflow = _point - attributeLevelThreshold[uint256(_attr)][index];\\n            } else {\\n                break;\\n            }\\n        }\\n        return (level, overflow);\\n    }\\n\\n    function _setAddresses(address[] calldata _addresses) private {\\n        require(_addresses.length == 9, 'DBContract: addresses length mismatch.');\\n\\n        LYNK_TOKEN          = _addresses[0];\\n        AP_TOKEN            = _addresses[1];\\n        STAKING             = _addresses[2];\\n        LYNKNFT             = _addresses[3];\\n        STAKING_LYNKNFT     = _addresses[4];\\n        LISTED_LYNKNFT      = _addresses[5];\\n        MARKET              = _addresses[6];\\n        USER_INFO           = _addresses[7];\\n        TEAM_ADDR           = _addresses[8];\\n    }\\n\\n    function mintPricesNum() external view returns (uint256) {\\n        return mintPrices.length;\\n    }\\n\\n    function attributeLevelThresholdNum() external view returns (uint256) {\\n        return attributeLevelThreshold.length;\\n    }\\n\\n    function attributeLevelThresholdNumByIndex(uint256 index) external view returns (uint256) {\\n        return attributeLevelThreshold.length > index ? attributeLevelThreshold[index].length : 0;\\n    }\\n\\n    function directRequirementsNum() external view returns (uint256) {\\n        return directRequirements.length;\\n    }\\n\\n    function performanceRequirementsNum() external view returns (uint256) {\\n        return performanceRequirements.length;\\n    }\\n\\n    function socialRewardRatesNum() external view returns (uint256) {\\n        return socialRewardRates.length;\\n    }\\n\\n    function contributionRewardAmountsNum() external view returns (uint256) {\\n        return contributionRewardAmounts.length;\\n    }\\n\\n    function communityRewardRatesNumByLevel(IUser.Level _level) external view returns (uint256) {\\n        return communityRewardRates[uint256(_level)].length;\\n    }\\n\\n    function achievementRewardAmountsNum() external view returns (uint256) {\\n        return achievementRewardAmounts.length;\\n    }\\n\\n    function maxVAAddPerDayPerTokensNum() external view returns (uint256) {\\n        return maxVAAddPerDayPerTokens.length;\\n    }\\n\\n    function maxVAAddPerDayByTokenId(uint256 _tokenId) external view returns (uint256) {\\n        uint256 tokenLevel = _calcTokenLevel(_tokenId);\\n        if (tokenLevel > maxVAAddPerDayPerTokens.length - 1) return 0;\\n\\n        return maxVAAddPerDayPerTokens[tokenLevel];\\n    }\\n\\n    function earlyBirdMintIdRange() external view returns (uint256, uint256) {\\n        return (earlyBirdMintStartId, earlyBirdMintEndId);\\n    }\\n\\n    function earlyBirdMintPrice() external view returns (address, uint256) {\\n        return (earlyBirdMintPayment, earlyBirdMintPriceInPayment);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7c1a50ab9b842f11467574088b65239ccc99376c3437e51fd4dd3fe3a2d64985\",\"license\":\"UNLICENSED\"},\"contracts/baseContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"./DBContract.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract baseContract is ContextUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address constant public BLACK_HOLE = address(0xdead);\\n    address immutable public DB_CONTRACT;\\n\\n    constructor(address dbContract) {\\n        DB_CONTRACT = dbContract;\\n    }\\n\\n    modifier onlyLYNKNFTOrDBContract() {\\n        require(\\n            DBContract(DB_CONTRACT).LYNKNFT() == _msgSender() ||\\n            DB_CONTRACT == _msgSender(),\\n                'baseContract: caller not the LYNK NFT contract.'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLYNKNFTContract() {\\n        require(DBContract(DB_CONTRACT).LYNKNFT() == _msgSender(), 'baseContract: caller not the LYNK NFT contract.');\\n        _;\\n    }\\n\\n    modifier onlyUserContract() {\\n        require(DBContract(DB_CONTRACT).USER_INFO() == _msgSender(), 'baseContract: caller not the User contract.');\\n        _;\\n    }\\n\\n    modifier onlyStakingContract() {\\n        require(DBContract(DB_CONTRACT).STAKING() == _msgSender(), 'baseContract: caller not the Staking contract.');\\n        _;\\n    }\\n\\n    modifier onlyUserOrStakingContract() {\\n        require(\\n            DBContract(DB_CONTRACT).USER_INFO() == _msgSender() ||\\n            DBContract(DB_CONTRACT).STAKING() == _msgSender(),\\n                'baseContract: caller not the User OR Staking contract.'\\n        );\\n        _;\\n    }\\n\\n    function __baseContract_init() internal {\\n        __Context_init();\\n    }\\n\\n    function _pay(address _payment, address _payer, uint256 _amount) internal {\\n        if (address(0) == _payment) {\\n            require(msg.value == _amount, 'baseContract: invalid value.');\\n            AddressUpgradeable.sendValue(payable(BLACK_HOLE), _amount);\\n            return;\\n        }\\n\\n        require(\\n            IERC20Upgradeable(_payment).allowance(_payer, address(this)) >= _amount,\\n            'baseContract: insufficient allowance'\\n        );\\n        if (DBContract(DB_CONTRACT).USDT_TOKEN() == _payment) {\\n            IERC20Upgradeable(_payment).safeTransferFrom(_payer, DBContract(DB_CONTRACT).TEAM_ADDR(), _amount);\\n        } else {\\n            IERC20Upgradeable(_payment).safeTransferFrom(_payer, BLACK_HOLE, _amount);\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0xa302fca7108cd7bb73a9c491d6ffddc1498a0177aacb6da298c6eaf7d293d19b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILYNKNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\ninterface ILYNKNFT {\\n\\n    enum Attribute {\\n        charisma,\\n        vitality,\\n        intellect,\\n        dexterity\\n    }\\n\\n    function nftInfoOf(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256[] memory _nftInfo);\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n}\",\"keccak256\":\"0xa6d8e1bbde089ce45418fe93057bb5caf0be6d543a88f28d8bb8d2fd69db5253\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUser.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\ninterface IUser {\\n\\n    enum Level {\\n        elite,\\n        epic,\\n        master,\\n        legendary,\\n        mythic,\\n        divine\\n    }\\n\\n    function isValidUser(address _userAddr) view external returns (bool);\\n\\n    function hookByUpgrade(address _userAddr, uint256 _performance) external;\\n    function hookByClaimReward(address _userAddr, uint256 _rewardAmount) external;\\n    function hookByStake(uint256 nftId) external;\\n    function hookByUnStake(uint256 nftId) external;\\n    function registerByEarlyPlan(address _userAddr, address _refAddr) external;\\n\\n}\",\"keccak256\":\"0xaa0189d4f9b805a2fbc838e153d04a5b31c763ce015cccc8be7ddcbcb685c712\",\"license\":\"UNLICENSED\"},\"contracts/token/LYNKNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"../baseContract.sol\\\";\\nimport \\\"../interfaces/IUser.sol\\\";\\nimport \\\"../interfaces/ILYNKNFT.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract LYNKNFT is ILYNKNFT, ERC721EnumerableUpgradeable, baseContract {\\n    uint256 private randomSeed;\\n    mapping(uint256 => uint256[]) public nftInfo;\\n    mapping(address => MintInfo) public mintInfoOf;\\n    mapping(string => bool) public nameUsed;\\n    mapping(uint256 => AttributeAddedInfo) public addedVAInfoOf;\\n\\n    uint256 public earlyBirdCounter;\\n    // @Deprecated\\n    uint256 public earlyBirdWlCounter;\\n    mapping(address => bool) public earlyBirdMintedOf;\\n\\n    event Mint(uint256 indexed tokenId, uint256[] nftInfo, string name, address payment, uint256 amount);\\n    event Upgrade(uint256 indexed tokenId, Attribute attr, uint256 point);\\n\\n    struct MintInfo {\\n        uint128 lastMintTime;\\n        uint128 mintNumInDuration;\\n    }\\n\\n    struct AttributeAddedInfo {\\n        uint128 lastAddedTime;\\n        uint128 addedInDuration;\\n    }\\n\\n    constructor(address dbAddress) baseContract(dbAddress){\\n\\n    }\\n\\n    function __LYNKNFT_init() public initializer {\\n        __LYNKNFT_init_unchained();\\n        __ERC721Enumerable_init();\\n        __ERC721_init(\\\"LYNKNFT\\\",\\\"LYNKNFT\\\");\\n        __baseContract_init();\\n    }\\n\\n    function __LYNKNFT_init_unchained() private {\\n        _randomSeedGen();\\n    }\\n\\n    // function earlyBirdMintWIthPermit(uint256 _amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n    //     require(DBContract(DB_CONTRACT).earlyBirdMintWlOf(_msgSender()), 'LYNKNFT: not in the wl.');\\n    //     // require(earlyBirdWlCounter < DBContract(DB_CONTRACT).wlNum(), 'LYNKNFT: wl num limit.');\\n\\n    //     IERC20PermitUpgradeable(\\n    //         DBContract(DB_CONTRACT).earlyBirdMintPayment()\\n    //     ).permit(_msgSender(), address(this), _amount, deadline, v, r, s);\\n    //     // earlyBirdWlCounter++;\\n        \\n    //     _earlyBirdMint(DBContract(DB_CONTRACT).rootAddress());\\n    // }\\n\\n    function earlyBirdMint() external {\\n        require(\\n            DBContract(DB_CONTRACT).earlyBirdMintWlOf(_msgSender()) || \\n            IUser(DBContract(DB_CONTRACT).USER_INFO()).isValidUser(_msgSender()),\\n                'LYNKNFT: not a valid address.'\\n        );\\n        // require(earlyBirdWlCounter < DBContract(DB_CONTRACT).wlNum(), 'LYNKNFT: wl num limit.');\\n        // earlyBirdWlCounter++;\\n        \\n        _earlyBirdMint(DBContract(DB_CONTRACT).rootAddress());\\n    }\\n\\n    // function refEarlyBirdMintWIthPermit(address _refAddress, uint256 _amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n    //     // require(DBContract(DB_CONTRACT).earlyBirdMintWlOf(_refAddress), 'LYNKNFT: not in the wl.');\\n    //     require(_refAddress != DBContract(DB_CONTRACT).rootAddress(), 'LYNKNFT: not in the wl.');\\n\\n    //     IERC20PermitUpgradeable(\\n    //         DBContract(DB_CONTRACT).earlyBirdMintPayment()\\n    //     ).permit(_msgSender(), address(this), _amount, deadline, v, r, s);\\n        \\n    //     _earlyBirdMint(_refAddress);\\n    // }\\n\\n    function refEarlyBirdMint(address _refAddress) external {\\n        // require(DBContract(DB_CONTRACT).earlyBirdMintWlOf(_refAddress), 'LYNKNFT: not in the wl.');\\n        require(\\n            !IUser(DBContract(DB_CONTRACT).USER_INFO()).isValidUser(_msgSender()) ||\\n            earlyBirdMintedOf[_msgSender()],\\n                'LYNKNFT: please call with earlyBirdMint.'\\n        );\\n        require(DBContract(DB_CONTRACT).earlyBirdMintWlOf(_refAddress), 'LYNKNFT: ref address not in the wl.');\\n        \\n        _earlyBirdMint(_refAddress);\\n    }\\n\\n    function earlyMintInfo() external view returns (uint256 _totalNum, uint256 _remainNum, uint256 _nextId) {\\n        (uint256 _startId, uint256 _endId) = DBContract(DB_CONTRACT).earlyBirdMintIdRange();\\n        _totalNum = _endId - _startId;\\n        _remainNum = _totalNum - earlyBirdCounter;\\n        _nextId = _startId + earlyBirdCounter;\\n    }\\n\\n    function mintWithPermit(uint256 _tokenId, address _payment, string calldata _name, uint256 _amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        IERC20PermitUpgradeable(_payment).permit(_msgSender(), address(this), _amount, deadline, v, r, s);\\n        _mint(_tokenId, _payment, _name);\\n    }\\n\\n    function mint(uint256 _tokenId, address _payment, string calldata _name) external {\\n        _mint(_tokenId, _payment, _name);\\n    }\\n\\n    function upgradeWithPermit(Attribute _attr, uint256 _tokenId, uint256 _point, address _payment, uint256 _amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        IERC20PermitUpgradeable(_payment).permit(_msgSender(), address(this), _amount, deadline, v, r, s);\\n        _upgrade(_attr, _tokenId, _point, _payment);\\n    }\\n\\n    function upgrade(Attribute _attr, uint256 _tokenId, uint256 _point, address _payment) external {\\n        _upgrade(_attr, _tokenId, _point, _payment);\\n    }\\n\\n    function nftInfoOf(uint256 _tokenId) external view override returns (uint256[] memory _nftInfo) {\\n        return nftInfo[_tokenId];\\n    }\\n\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function _attributesGen(address _minter) private returns (uint256 _vitality, uint256 _intellect) {\\n        uint256 _randomSeed = _randomSeedGen();\\n        _randomSeed = uint256(keccak256(abi.encodePacked(_randomSeed, _minter)));\\n        _vitality = ((_randomSeed & 0xff) % 5) + 1;\\n        _intellect = (((_randomSeed >> 128) & 0xff) % 3) + 1;\\n    }\\n\\n    function _randomSeedGen() private returns (uint256 _randomSeed) {\\n        _randomSeed = uint256(keccak256(abi.encodePacked(randomSeed, block.timestamp, block.difficulty)));\\n        randomSeed = _randomSeed;\\n    }\\n\\n    /// @dev Returns an URI for a given token ID\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return DBContract(DB_CONTRACT).baseTokenURI();\\n    }\\n\\n    function _mintPrice(uint256 _tokenId, address _payment) private view returns (uint256) {\\n        require(\\n            DBContract(DB_CONTRACT).LYNK_TOKEN() == _payment ||\\n            DBContract(DB_CONTRACT).USDT_TOKEN() == _payment,\\n            'LYNKNFT: unsupported payment.'\\n        );\\n        uint256 decimal = IERC20MetadataUpgradeable(_payment).decimals();\\n        uint256 mintPrice;\\n        if (_tokenId >= 300_000) {\\n            mintPrice = DBContract(DB_CONTRACT).mintPrices(2) * (10 ** decimal);\\n        } else if (_tokenId >= 200_000) {\\n            mintPrice = DBContract(DB_CONTRACT).mintPrices(1) * (10 ** decimal);\\n        } else {\\n            mintPrice = DBContract(DB_CONTRACT).mintPrices(0) * (10 ** decimal);\\n        }\\n        require(_tokenId >= 100_000, 'LYNKNFT: reverse token id.');\\n        require(_tokenId < 400_000, 'LYNKNFT: token id too large.');\\n\\n        return mintPrice;\\n    }\\n\\n    function _earlyBirdMint(address _refAddress) private {\\n        require(DBContract(DB_CONTRACT).earlyBirdMintEnable(), 'LYNKNFT: cannot mint yet.');\\n\\n        require(!earlyBirdMintedOf[_msgSender()], 'LYNKNFT: already minted.');\\n        earlyBirdMintedOf[_msgSender()] = true;\\n        \\n        address userContractAddress = DBContract(DB_CONTRACT).USER_INFO();\\n        // require(!IUser(userContractAddress).isValidUser(_msgSender()), 'LYNKNFT: already minted.');\\n        if (!IUser(userContractAddress).isValidUser(_msgSender())) {\\n            IUser(userContractAddress).registerByEarlyPlan(_msgSender(), _refAddress);   \\n        }\\n\\n        (uint256 _startId, uint256 _endId) = DBContract(DB_CONTRACT).earlyBirdMintIdRange();\\n        uint256 _earlyBirdCurrentId = _startId + earlyBirdCounter;\\n        require(_earlyBirdCurrentId < _endId, 'LYNKNFT: sold out.');\\n        // require(_earlyBirdCurrentId + (DBContract(DB_CONTRACT).wlNum() - earlyBirdWlCounter) < _endId, 'LYNKNFT: sold out.');\\n        earlyBirdCounter++;\\n        string memory _name = string(abi.encodePacked(StringsUpgradeable.toString(_earlyBirdCurrentId), \\\".lynk\\\"));\\n\\n        (address payment, uint256 price) = DBContract(DB_CONTRACT).earlyBirdMintPrice();\\n        _pay(payment, _msgSender(), price);\\n\\n        nftInfo[_earlyBirdCurrentId] = [ DBContract(DB_CONTRACT).earlyBirdInitCA(), 0, 0, 0];\\n        ERC721Upgradeable._safeMint(_msgSender(), _earlyBirdCurrentId);\\n        emit Mint(_earlyBirdCurrentId, nftInfo[_earlyBirdCurrentId], _name, payment, price);\\n    }\\n\\n    function _mint(uint256 _tokenId, address _payment, string calldata _name) private {\\n        require(DBContract(DB_CONTRACT).commonMintEnable(), 'LYNKNFT: cannot mint yet.');\\n\\n        require(\\n            IUser(DBContract(DB_CONTRACT).USER_INFO()).isValidUser(_msgSender()),\\n            'LYNKNFT: not a valid user.'\\n        );\\n        require(!nameUsed[_name], 'LYNKNFT: name already in used.');\\n        require(!_isReverseName(_name), 'LYNKNFT: reversed name.');\\n        nameUsed[_name] = true;\\n\\n        MintInfo memory mintInfo = mintInfoOf[_msgSender()];\\n        if (block.timestamp - mintInfo.lastMintTime >= DBContract(DB_CONTRACT).duration()) {\\n            mintInfo.mintNumInDuration = 0;\\n            mintInfoOf[_msgSender()].lastMintTime = uint128(block.timestamp);\\n        }\\n        require(\\n            mintInfo.mintNumInDuration < DBContract(DB_CONTRACT).maxMintPerDayPerAddress(),\\n            'LYNKNFT: cannot mint more in a day.'\\n        );\\n        mintInfoOf[_msgSender()].mintNumInDuration = mintInfo.mintNumInDuration + 1;\\n\\n        uint256 mintPrice = _mintPrice(_tokenId, _payment);\\n        _pay(_payment, _msgSender(), mintPrice);\\n\\n        (uint256 vitality, uint256 intellect) = _attributesGen(_msgSender());\\n        nftInfo[_tokenId] = [ 0, vitality, intellect, 0];\\n        ERC721Upgradeable._safeMint(_msgSender(), _tokenId);\\n\\n        emit Mint(_tokenId, nftInfo[_tokenId], string(abi.encodePacked(_name, \\\".lynk\\\")), _payment, mintPrice);\\n    }\\n\\n    function _upgrade(Attribute _attr, uint256 _tokenId, uint256 _point, address _payment) private {\\n        require(\\n            IUser(DBContract(DB_CONTRACT).USER_INFO()).isValidUser(_msgSender()),\\n            'LYNKNFT: not a valid user.'\\n        );\\n\\n        // avoid upgrade while staking\\n        require(\\n            tx.origin == _msgSender() &&\\n            ERC721Upgradeable.ownerOf(_tokenId) == _msgSender(),\\n            'LYNKNFT: not the owner'\\n        );\\n\\n        if (Attribute.charisma == _attr) {\\n            require(\\n                _payment == DBContract(DB_CONTRACT).USDT_TOKEN() ||\\n                _payment == DBContract(DB_CONTRACT).LYNK_TOKEN(),\\n                'LYNKNFT: unsupported payment.'\\n            );\\n        } else {\\n            if (Attribute.vitality == _attr) {\\n                AttributeAddedInfo memory addedInfo = addedVAInfoOf[_tokenId];\\n                if (block.timestamp - addedInfo.lastAddedTime >= DBContract(DB_CONTRACT).duration()) {\\n                    addedInfo.addedInDuration = 0;\\n                    addedVAInfoOf[_tokenId].lastAddedTime = uint128(block.timestamp);\\n                }\\n                require(\\n                    addedInfo.addedInDuration + _point <= DBContract(DB_CONTRACT).maxVAAddPerDayByTokenId(_tokenId),\\n                        'LYNKNFT: cannot upgrade more in a day.'\\n                );\\n                addedVAInfoOf[_tokenId].addedInDuration = addedInfo.addedInDuration + uint128(_point);\\n            } else {\\n                uint256 preAttrIndex = uint256(_attr) - 1;\\n                (uint256 preAttrLevel,) = DBContract(DB_CONTRACT).calcLevel(Attribute(preAttrIndex), nftInfo[_tokenId][preAttrIndex]);\\n                (uint256 curAttrLevelAfterUpgrade, uint256 curAttrLevelOverflowAfterUpgrade) = DBContract(DB_CONTRACT).calcLevel(_attr, _point + nftInfo[_tokenId][uint256(_attr)]);\\n                require(\\n                    preAttrLevel > curAttrLevelAfterUpgrade ||\\n                    (preAttrLevel == curAttrLevelAfterUpgrade && curAttrLevelOverflowAfterUpgrade == 0),\\n                    'LYNKNFT: level overflow.'\\n                );\\n            }\\n\\n            require(_payment == DBContract(DB_CONTRACT).AP_TOKEN(), 'LYNKNFT: unsupported payment.');\\n        }\\n\\n        uint256 decimal = IERC20MetadataUpgradeable(_payment).decimals();\\n        uint256 amount = _point * (10 ** decimal);\\n        _pay(_payment, _msgSender(), amount);\\n\\n        nftInfo[_tokenId][uint256(_attr)] += _point;\\n        emit Upgrade(_tokenId, _attr, _point);\\n\\n        // dealing with the ref things.\\n        IUser(DBContract(DB_CONTRACT).USER_INFO()).hookByUpgrade(_msgSender(), Attribute.charisma == _attr ? _point : 0);\\n    }\\n\\n    function isReverseName(string memory _name) external pure returns (bool) {\\n        return _isReverseName(_name);\\n    }\\n\\n    function _isReverseName(string memory _name) private pure returns (bool) {\\n        bytes memory b = bytes(_name);\\n        uint256 _nameUint = 0;\\n        for(uint256 i = 0; i < b.length; i++) {\\n            if (i == 0 && uint8(b[i]) == 48 && b.length > 0) {\\n                return false;\\n            }\\n\\n            if(uint8(b[i]) < 48 || uint8(b[i]) > 57) {\\n                return false;\\n            }\\n            _nameUint = _nameUint * 10 + (uint8(b[i]) - 48);\\n        }\\n        return _nameUint < 100000;\\n    }\\n}\\n\",\"keccak256\":\"0x6390b15fe92867bd90edc34642d224dc0db6a2918016f29666bcc14e826ae0d2\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200526a3803806200526a833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b6080516150f66200017460003960008181610427015281816107a60152818161095201528181610bd901528181610d8f01528181610e3401528181610f9a015281816115160152818161167a015281816118000152818161192e015281816119de01528181611f99015281816121310152818161220a015281816124fd015281816125c4015281816127d3015281816129b001528181612a5b01528181612b8901528181612c6101528181612dbe01528181612e9c01528181612fee015281816131d60152818161344b015281816134ef01528181613824015281816138cf01528181613a2a01528181613ae90152613b4101526150f66000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806370a0823111610125578063c87b56dd116100ad578063dcefcebc1161007c578063dcefcebc14610500578063dfa2eec014610520578063e1621a0714610533578063e67e402c14610556578063e985e9c51461056957600080fd5b8063c87b56dd146104b4578063cabaa177146104c7578063cb97200e146104da578063d49cf8e3146104ed57600080fd5b8063a22cb465116100f4578063a22cb46514610449578063a70687ae1461045c578063b6fc133a14610465578063b77c055514610499578063b88d4fde146104a157600080fd5b806370a08231146103ff5780637f6c7bc71461041257806395d89b411461041a5780639ccea0cd1461042257600080fd5b80633f8336e3116101a85780634f6ccce7116101775780634f6ccce7146103a457806355eda4e8146103b757806357e1f309146103c05780636352211e146103e35780636bc3d0a0146103f657600080fd5b80633f8336e31461031757806342842e0e1461036b578063496680761461037e5780634f558e791461039157600080fd5b80630b9b6e8b116101ef5780630b9b6e8b1461029e57806312bf27b0146102cc57806318160ddd146102df57806323b872dd146102f15780632f745c591461030457600080fd5b806301ffc9a71461022157806306fdde0314610249578063081812fc1461025e578063095ea7b314610289575b600080fd5b61023461022f36600461445f565b6105a5565b60405190151581526020015b60405180910390f35b6102516105d0565b60405161024091906144d4565b61027161026c3660046144e7565b610662565b6040516001600160a01b039091168152602001610240565b61029c610297366004614515565b610689565b005b6102346102ac3660046145ee565b805160208183018101805160cc8252928201919093012091525460ff1681565b61029c6102da366004614637565b6107a4565b6099545b604051908152602001610240565b61029c6102ff366004614654565b610a30565b6102e3610312366004614515565b610a61565b61034b6103253660046144e7565b60cd602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610240565b61029c610379366004614654565b610af7565b61023461038c3660046145ee565b610b12565b61023461039f3660046144e7565b610b1d565b6102e36103b23660046144e7565b610b3c565b61027161dead81565b6103c8610bcf565b60408051938452602084019290925290820152606001610240565b6102716103f13660046144e7565b610c9f565b6102e360ce5481565b6102e361040d366004614637565b610cff565b61029c610d85565b610251611030565b6102717f000000000000000000000000000000000000000000000000000000000000000081565b61029c6104573660046146a3565b61103f565b6102e360cf5481565b61034b610473366004614637565b60cb602052600090815260409020546001600160801b0380821691600160801b90041682565b61029c61104e565b61029c6104af3660046146dc565b6111b6565b6102516104c23660046144e7565b6111ee565b61029c6104d53660046147b4565b611255565b61029c6104e8366004614862565b6112d6565b61029c6104fb3660046148e6565b61134c565b61051361050e3660046144e7565b611358565b604051610240919061492e565b6102e361052e366004614972565b6113ba565b610234610541366004614637565b60d06020526000908152604090205460ff1681565b61029c610564366004614994565b6113eb565b6102346105773660046149f0565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b14806105ca57506105ca826113f7565b92915050565b6060606580546105df90614a1e565b80601f016020809104026020016040519081016040528092919081815260200182805461060b90614a1e565b80156106585780601f1061062d57610100808354040283529160200191610658565b820191906000526020600020905b81548152906001019060200180831161063b57829003601f168201915b5050505050905090565b600061066d82611447565b506000908152606960205260409020546001600160a01b031690565b600061069482610c9f565b9050806001600160a01b0316836001600160a01b031614156107075760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061072357506107238133610577565b6107955760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016106fe565b61079f83836114a6565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa1785fe6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107fd57600080fd5b505afa158015610811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108359190614a59565b6001600160a01b031663f3c95c60336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561088357600080fd5b505afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb9190614a76565b15806108d6575033600090815260d0602052604090205460ff165b6109335760405162461bcd60e51b815260206004820152602860248201527f4c594e4b4e46543a20706c656173652063616c6c2077697468206561726c794260448201526734b93226b4b73a1760c11b60648201526084016106fe565b6040516354c1498d60e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906354c1498d9060240160206040518083038186803b15801561099457600080fd5b505afa1580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190614a76565b610a245760405162461bcd60e51b815260206004820152602360248201527f4c594e4b4e46543a207265662061646472657373206e6f7420696e20746865206044820152623bb61760e91b60648201526084016106fe565b610a2d81611514565b50565b610a3a3382611b01565b610a565760405162461bcd60e51b81526004016106fe90614a93565b61079f838383611b80565b6000610a6c83610cff565b8210610ace5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106fe565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b61079f838383604051806020016040528060008152506111b6565b60006105ca82611d27565b6000818152606760205260408120546001600160a01b031615156105ca565b6000610b4760995490565b8210610baa5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106fe565b60998281548110610bbd57610bbd614ae1565b90600052602060002001549050919050565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1888116040518163ffffffff1660e01b8152600401604080518083038186803b158015610c2f57600080fd5b505afa158015610c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c679190614af7565b9092509050610c768282614b31565b945060ce5485610c869190614b31565b935060ce5482610c969190614b48565b92505050909192565b6000818152606760205260408120546001600160a01b0316806105ca5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016106fe565b60006001600160a01b038216610d695760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016106fe565b506001600160a01b031660009081526068602052604090205490565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166354c1498d336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610df457600080fd5b505afa158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c9190614a76565b80610f4957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa1785fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8b57600080fd5b505afa158015610e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec39190614a59565b6001600160a01b031663f3c95c60336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190614a76565b610f955760405162461bcd60e51b815260206004820152601d60248201527f4c594e4b4e46543a206e6f7420612076616c696420616464726573732e00000060448201526064016106fe565b61102e7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaa2b8c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610ff157600080fd5b505afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110299190614a59565b611514565b565b6060606680546105df90614a1e565b61104a338383611e2b565b5050565b600054610100900460ff161580801561106e5750600054600160ff909116105b806110885750303b158015611088575060005460ff166001145b6110eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106fe565b6000805460ff19166001179055801561110e576000805461ff0019166101001790555b611116611efa565b61111e611f02565b6111666040518060400160405280600781526020016613165392d3919560ca1b8152506040518060400160405280600781526020016613165392d3919560ca1b815250611f29565b61116e611f5a565b8015610a2d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6111c03383611b01565b6111dc5760405162461bcd60e51b81526004016106fe90614a93565b6111e884848484611f62565b50505050565b60606111f982611447565b6000611203611f95565b90506000815111611223576040518060200160405280600081525061124e565b8061122d84612031565b60405160200161123e929190614b60565b6040516020818303038152906040525b9392505050565b60405163d505accf60e01b81526001600160a01b0389169063d505accf9061128d90339030908a908a908a908a908a90600401614b8f565b600060405180830381600087803b1580156112a757600080fd5b505af11580156112bb573d6000803e3d6000fd5b505050506112cb8989898961212f565b505050505050505050565b60405163d505accf60e01b81526001600160a01b0387169063d505accf9061130e90339030908a908a908a908a908a90600401614b8f565b600060405180830381600087803b15801561132857600080fd5b505af115801561133c573d6000803e3d6000fd5b505050506112cb898989896127d1565b6111e8848484846127d1565b600081815260ca60209081526040918290208054835181840281018401909452808452606093928301828280156113ae57602002820191906000526020600020905b81548152602001906001019080831161139a575b50505050509050919050565b60ca60205281600052604060002081815481106113d657600080fd5b90600052602060002001600091509150505481565b6111e88484848461212f565b60006001600160e01b031982166380ac58cd60e01b148061142857506001600160e01b03198216635b5e139f60e01b145b806105ca57506301ffc9a760e01b6001600160e01b03198316146105ca565b6000818152606760205260409020546001600160a01b0316610a2d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016106fe565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906114db82610c9f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ea0d14656040518163ffffffff1660e01b815260040160206040518083038186803b15801561156d57600080fd5b505afa158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a59190614a76565b6115ed5760405162461bcd60e51b8152602060048201526019602482015278262ca725a7232a1d1031b0b73737ba1036b4b73a103cb2ba1760391b60448201526064016106fe565b33600090815260d0602052604090205460ff161561164d5760405162461bcd60e51b815260206004820152601860248201527f4c594e4b4e46543a20616c7265616479206d696e7465642e000000000000000060448201526064016106fe565b33600090815260d060209081526040808320805460ff191660011790558051637d0bc2ff60e11b815290517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169263fa1785fe9260048082019391829003018186803b1580156116c457600080fd5b505afa1580156116d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fc9190614a59565b90506001600160a01b03811663f3c95c60336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561174d57600080fd5b505afa158015611761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117859190614a76565b6117fb576001600160a01b0381166323b3f2a5336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529085166024820152604401600060405180830381600087803b1580156117e257600080fd5b505af11580156117f6573d6000803e3d6000fd5b505050505b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1888116040518163ffffffff1660e01b8152600401604080518083038186803b15801561185657600080fd5b505afa15801561186a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188e9190614af7565b91509150600060ce54836118a29190614b48565b90508181106118e85760405162461bcd60e51b8152602060048201526012602482015271262ca725a7232a1d1039b7b6321037baba1760711b60448201526064016106fe565b60ce80549060006118f883614bd0565b9190505550600061190882612031565b6040516020016119189190614beb565b60405160208183030381529060405290506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637af0cac36040518163ffffffff1660e01b8152600401604080518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190614c14565b915091506119d1826119cb3390565b836132fa565b60405180608001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166364db03b86040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3557600080fd5b505afa158015611a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6d9190614c42565b8152600060208083018290526040808401839052606090930182905287825260ca905220611a9c916004614376565b50611aa733856135a7565b837f43332af98367d01c3bc9be42717917c42e1bd0084f4cdad927e9b4c06471d35160ca6000878152602001908152602001600020858585604051611aef9493929190614c5b565b60405180910390a25050505050505050565b600080611b0d83610c9f565b9050806001600160a01b0316846001600160a01b03161480611b5457506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b80611b785750836001600160a01b0316611b6d84610662565b6001600160a01b0316145b949350505050565b826001600160a01b0316611b9382610c9f565b6001600160a01b031614611bf75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106fe565b6001600160a01b038216611c595760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106fe565b611c648383836135c1565b611c6f6000826114a6565b6001600160a01b0383166000908152606860205260408120805460019290611c98908490614b31565b90915550506001600160a01b0382166000908152606860205260408120805460019290611cc6908490614b48565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60008181805b8251811015611e1e5780158015611d5e5750828181518110611d5157611d51614ae1565b60209101015160f81c6030145b8015611d6b575060008351115b15611d7b57506000949350505050565b6030838281518110611d8f57611d8f614ae1565b016020015160f81c1080611dbc57506039838281518110611db257611db2614ae1565b016020015160f81c115b15611dcc57506000949350505050565b6030838281518110611de057611de0614ae1565b0160200151611df2919060f81c614cce565b60ff16611e0083600a614cf1565b611e0a9190614b48565b915080611e1681614bd0565b915050611d2d565b50620186a0119392505050565b816001600160a01b0316836001600160a01b03161415611e8d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106fe565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610a2d613679565b600054610100900460ff1661102e5760405162461bcd60e51b81526004016106fe90614d10565b600054610100900460ff16611f505760405162461bcd60e51b81526004016106fe90614d10565b61104a82826136bb565b61102e611f02565b611f6d848484611b80565b611f7984848484613709565b6111e85760405162461bcd60e51b81526004016106fe90614d5b565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d547cfb76040518163ffffffff1660e01b815260040160006040518083038186803b158015611ff057600080fd5b505afa158015612004573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261202c9190810190614dad565b905090565b6060816120555750506040805180820190915260018152600360fc1b602082015290565b8160005b811561207f578061206981614bd0565b91506120789050600a83614e3a565b9150612059565b60008167ffffffffffffffff81111561209a5761209a614541565b6040519080825280601f01601f1916602001820160405280156120c4576020820181803683370190505b5090505b8415611b78576120d9600183614b31565b91506120e6600a86614e4e565b6120f1906030614b48565b60f81b81838151811061210657612106614ae1565b60200101906001600160f81b031916908160001a905350612128600a86614e3a565b94506120c8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366227eb96040518163ffffffff1660e01b815260040160206040518083038186803b15801561218857600080fd5b505afa15801561219c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c09190614a76565b6122085760405162461bcd60e51b8152602060048201526019602482015278262ca725a7232a1d1031b0b73737ba1036b4b73a103cb2ba1760391b60448201526064016106fe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa1785fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561226157600080fd5b505afa158015612275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122999190614a59565b6001600160a01b031663f3c95c60336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156122e757600080fd5b505afa1580156122fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231f9190614a76565b61236b5760405162461bcd60e51b815260206004820152601a60248201527f4c594e4b4e46543a206e6f7420612076616c696420757365722e00000000000060448201526064016106fe565b60cc828260405161237d929190614e62565b9081526040519081900360200190205460ff16156123dd5760405162461bcd60e51b815260206004820152601e60248201527f4c594e4b4e46543a206e616d6520616c726561647920696e20757365642e000060448201526064016106fe565b61241c82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d2792505050565b156124695760405162461bcd60e51b815260206004820152601760248201527f4c594e4b4e46543a207265766572736564206e616d652e00000000000000000060448201526064016106fe565b600160cc838360405161247d929190614e62565b908152604051908190036020019020805491151560ff19909216919091179055600060cb816124a93390565b6001600160a01b03908116825260208083019390935260409182016000208251808401845290546001600160801b038082168352600160801b909104168185015282516303ed69ad60e21b815292519094507f000000000000000000000000000000000000000000000000000000000000000090911692630fb5a6b49260048082019391829003018186803b15801561254157600080fd5b505afa158015612555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125799190614c42565b815161258e906001600160801b031642614b31565b106125c2576000602082810182905233825260cb90526040902080546001600160801b031916426001600160801b03161790555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663600a2f826040518163ffffffff1660e01b815260040160206040518083038186803b15801561261b57600080fd5b505afa15801561262f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126539190614c42565b81602001516001600160801b0316106126ba5760405162461bcd60e51b815260206004820152602360248201527f4c594e4b4e46543a2063616e6e6f74206d696e74206d6f726520696e2061206460448201526230bc9760e91b60648201526084016106fe565b60208101516126ca906001614e72565b33600090815260cb6020526040812080546001600160801b03938416600160801b029316929092179091556126ff8686613816565b905061270b85336119cb565b60008061271733613c75565b91509150604051806080016040528060008152602001838152602001828152602001600081525060ca60008a815260200190815260200160002090600461275f929190614376565b5061276a33896135a7565b877f43332af98367d01c3bc9be42717917c42e1bd0084f4cdad927e9b4c06471d35160ca60008b815260200190815260200160002088886040516020016127b2929190614e94565b60408051601f1981840301815290829052611aef92918c908990614c5b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa1785fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561282a57600080fd5b505afa15801561283e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128629190614a59565b6001600160a01b031663f3c95c60336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156128b057600080fd5b505afa1580156128c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e89190614a76565b6129345760405162461bcd60e51b815260206004820152601a60248201527f4c594e4b4e46543a206e6f7420612076616c696420757365722e00000000000060448201526064016106fe565b323314801561295357503361294884610c9f565b6001600160a01b0316145b6129985760405162461bcd60e51b8152602060048201526016602482015275262ca725a7232a1d103737ba103a34329037bbb732b960511b60448201526064016106fe565b8360038111156129aa576129aa614eae565b612b20577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377b330c96040518163ffffffff1660e01b815260040160206040518083038186803b158015612a0757600080fd5b505afa158015612a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3f9190614a59565b6001600160a01b0316816001600160a01b03161480612aff57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b87436b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ab257600080fd5b505afa158015612ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aea9190614a59565b6001600160a01b0316816001600160a01b0316145b612b1b5760405162461bcd60e51b81526004016106fe90614ec4565b6130ad565b836003811115612b3257612b32614eae565b60011415612d9857600083815260cd60209081526040918290208251808401845290546001600160801b038082168352600160801b909104168183015282516303ed69ad60e21b8152925190926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692630fb5a6b492600480840193829003018186803b158015612bca57600080fd5b505afa158015612bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c029190614c42565b8151612c17906001600160801b031642614b31565b10612c4b576000602082810182905285825260cd90526040902080546001600160801b0319166001600160801b0342161790555b60405163317369c560e11b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906362e6d38a9060240160206040518083038186803b158015612cab57600080fd5b505afa158015612cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce39190614c42565b8382602001516001600160801b0316612cfc9190614b48565b1115612d595760405162461bcd60e51b815260206004820152602660248201527f4c594e4b4e46543a2063616e6e6f742075706772616465206d6f726520696e2060448201526530903230bc9760d11b60648201526084016106fe565b828160200151612d699190614e72565b600085815260cd6020526040902080546001600160801b03928316600160801b02921691909117905550612fec565b60006001856003811115612dae57612dae614eae565b612db89190614b31565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2cd99af836003811115612dfd57612dfd614eae565b600088815260ca60205260409020805486908110612e1d57612e1d614ae1565b90600052602060002001546040518363ffffffff1660e01b8152600401612e45929190614efb565b604080518083038186803b158015612e5c57600080fd5b505afa158015612e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e949190614af7565b5090506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2cd99af8960ca60008b81526020019081526020016000208b6003811115612eef57612eef614eae565b81548110612eff57612eff614ae1565b906000526020600020015489612f159190614b48565b6040518363ffffffff1660e01b8152600401612f32929190614efb565b604080518083038186803b158015612f4957600080fd5b505afa158015612f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f819190614af7565b9150915081831180612f9b57508183148015612f9b575080155b612fe75760405162461bcd60e51b815260206004820152601860248201527f4c594e4b4e46543a206c6576656c206f766572666c6f772e000000000000000060448201526064016106fe565b505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2e30dd06040518163ffffffff1660e01b815260040160206040518083038186803b15801561304557600080fd5b505afa158015613059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307d9190614a59565b6001600160a01b0316816001600160a01b0316146130ad5760405162461bcd60e51b81526004016106fe90614ec4565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156130e857600080fd5b505afa1580156130fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131209190614f27565b60ff169050600061313282600a615028565b61313c9085614cf1565b905061314883336119cb565b600085815260ca60205260409020849087600381111561316a5761316a614eae565b8154811061317a5761317a614ae1565b9060005260206000200160008282546131939190614b48565b92505081905550847f6a4348800167e375a04ba455a3563b96544c3d4a8662a4ca79307485fb6dbfc187866040516131cc929190614efb565b60405180910390a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa1785fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561322d57600080fd5b505afa158015613241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132659190614a59565b6001600160a01b031663562afdf53388600381111561328657613286614eae565b15613292576000613294565b865b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156132da57600080fd5b505af11580156132ee573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b038316613363578034146133575760405162461bcd60e51b815260206004820152601c60248201527f62617365436f6e74726163743a20696e76616c69642076616c75652e0000000060448201526064016106fe565b61079f61dead82613d0c565b604051636eb1769f60e11b81526001600160a01b03838116600483015230602483015282919085169063dd62ed3e9060440160206040518083038186803b1580156133ad57600080fd5b505afa1580156133c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e59190614c42565b101561343f5760405162461bcd60e51b8152602060048201526024808201527f62617365436f6e74726163743a20696e73756666696369656e7420616c6c6f77604482015263616e636560e01b60648201526084016106fe565b826001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377b330c96040518163ffffffff1660e01b815260040160206040518083038186803b1580156134a257600080fd5b505afa1580156134b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134da9190614a59565b6001600160a01b031614156135905761079f827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630b00fd546040518163ffffffff1660e01b815260040160206040518083038186803b15801561354657600080fd5b505afa15801561355a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357e9190614a59565b6001600160a01b038616919084613e25565b61079f6001600160a01b0384168361dead84613e25565b61104a828260405180602001604052806000815250613e7f565b6001600160a01b03831661361c5761361781609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61363f565b816001600160a01b0316836001600160a01b03161461363f5761363f8382613eb2565b6001600160a01b0382166136565761079f81613f4f565b826001600160a01b0316826001600160a01b03161461079f5761079f8282613ffe565b60c954604080516020810192909252429082015244606082015260009060800160408051601f19818403018152919052805160209091012060c9819055919050565b600054610100900460ff166136e25760405162461bcd60e51b81526004016106fe90614d10565b81516136f59060659060208501906143c1565b50805161079f9060669060208401906143c1565b60006001600160a01b0384163b1561380b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061374d903390899088908890600401615034565b602060405180830381600087803b15801561376757600080fd5b505af1925050508015613797575060408051601f3d908101601f1916820190925261379491810190615071565b60015b6137f1573d8080156137c5576040519150601f19603f3d011682016040523d82523d6000602084013e6137ca565b606091505b5080516137e95760405162461bcd60e51b81526004016106fe90614d5b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611b78565b506001949350505050565b6000816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b87436b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561387b57600080fd5b505afa15801561388f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b39190614a59565b6001600160a01b031614806139695750816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377b330c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561392657600080fd5b505afa15801561393a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395e9190614a59565b6001600160a01b0316145b6139855760405162461bcd60e51b81526004016106fe90614ec4565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156139c057600080fd5b505afa1580156139d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f89190614f27565b60ff1690506000620493e08510613abe57613a1482600a615028565b6040516330c3d99f60e11b8152600260048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636187b33e906024015b60206040518083038186803b158015613a7557600080fd5b505afa158015613a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aad9190614c42565b613ab79190614cf1565b9050613bd0565b62030d408510613b2057613ad382600a615028565b6040516330c3d99f60e11b8152600160048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636187b33e90602401613a5d565b613b2b82600a615028565b6040516330c3d99f60e11b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636187b33e9060240160206040518083038186803b158015613b8b57600080fd5b505afa158015613b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc39190614c42565b613bcd9190614cf1565b90505b620186a0851015613c235760405162461bcd60e51b815260206004820152601a60248201527f4c594e4b4e46543a207265766572736520746f6b656e2069642e00000000000060448201526064016106fe565b62061a808510611b785760405162461bcd60e51b815260206004820152601c60248201527f4c594e4b4e46543a20746f6b656e20696420746f6f206c617267652e0000000060448201526064016106fe565b6000806000613c82613679565b90508084604051602001613cb292919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051601f1981840301815291905280516020909101209050613cda600560ff8316614e4e565b613ce5906001614b48565b9250613cf9600360ff608084901c16614e4e565b613d04906001614b48565b915050915091565b80471015613d5c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106fe565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613da9576040519150601f19603f3d011682016040523d82523d6000602084013e613dae565b606091505b505090508061079f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106fe565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526111e8908590614042565b613e898383614114565b613e966000848484613709565b61079f5760405162461bcd60e51b81526004016106fe90614d5b565b60006001613ebf84610cff565b613ec99190614b31565b600083815260986020526040902054909150808214613f1c576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090613f6190600190614b31565b6000838152609a602052604081205460998054939450909284908110613f8957613f89614ae1565b906000526020600020015490508060998381548110613faa57613faa614ae1565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480613fe257613fe261508e565b6001900381819060005260206000200160009055905550505050565b600061400983610cff565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6000614097826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142629092919063ffffffff16565b80519091501561079f57808060200190518101906140b59190614a76565b61079f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106fe565b6001600160a01b03821661416a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106fe565b6000818152606760205260409020546001600160a01b0316156141cf5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106fe565b6141db600083836135c1565b6001600160a01b0382166000908152606860205260408120805460019290614204908490614b48565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060611b788484600085856001600160a01b0385163b6142c45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106fe565b600080866001600160a01b031685876040516142e091906150a4565b60006040518083038185875af1925050503d806000811461431d576040519150601f19603f3d011682016040523d82523d6000602084013e614322565b606091505b509150915061433282828661433d565b979650505050505050565b6060831561434c57508161124e565b82511561435c5782518084602001fd5b8160405162461bcd60e51b81526004016106fe91906144d4565b8280548282559060005260206000209081019282156143b1579160200282015b828111156143b1578251825591602001919060010190614396565b506143bd929150614434565b5090565b8280546143cd90614a1e565b90600052602060002090601f0160209004810192826143ef57600085556143b1565b82601f1061440857805160ff19168380011785556143b1565b828001600101855582156143b157918201828111156143b1578251825591602001919060010190614396565b5b808211156143bd5760008155600101614435565b6001600160e01b031981168114610a2d57600080fd5b60006020828403121561447157600080fd5b813561124e81614449565b60005b8381101561449757818101518382015260200161447f565b838111156111e85750506000910152565b600081518084526144c081602086016020860161447c565b601f01601f19169290920160200192915050565b60208152600061124e60208301846144a8565b6000602082840312156144f957600080fd5b5035919050565b6001600160a01b0381168114610a2d57600080fd5b6000806040838503121561452857600080fd5b823561453381614500565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561458057614580614541565b604052919050565b600067ffffffffffffffff8211156145a2576145a2614541565b50601f01601f191660200190565b60006145c36145be84614588565b614557565b90508281528383830111156145d757600080fd5b828260208301376000602084830101529392505050565b60006020828403121561460057600080fd5b813567ffffffffffffffff81111561461757600080fd5b8201601f8101841361462857600080fd5b611b78848235602084016145b0565b60006020828403121561464957600080fd5b813561124e81614500565b60008060006060848603121561466957600080fd5b833561467481614500565b9250602084013561468481614500565b929592945050506040919091013590565b8015158114610a2d57600080fd5b600080604083850312156146b657600080fd5b82356146c181614500565b915060208301356146d181614695565b809150509250929050565b600080600080608085870312156146f257600080fd5b84356146fd81614500565b9350602085013561470d81614500565b925060408501359150606085013567ffffffffffffffff81111561473057600080fd5b8501601f8101871361474157600080fd5b614750878235602084016145b0565b91505092959194509250565b60008083601f84011261476e57600080fd5b50813567ffffffffffffffff81111561478657600080fd5b60208301915083602082850101111561479e57600080fd5b9250929050565b60ff81168114610a2d57600080fd5b60008060008060008060008060006101008a8c0312156147d357600080fd5b8935985060208a01356147e581614500565b975060408a013567ffffffffffffffff81111561480157600080fd5b61480d8c828d0161475c565b90985096505060608a0135945060808a0135935060a08a013561482f816147a5565b8093505060c08a0135915060e08a013590509295985092959850929598565b80356004811061485d57600080fd5b919050565b60008060008060008060008060006101208a8c03121561488157600080fd5b61488a8a61484e565b985060208a0135975060408a0135965060608a01356148a881614500565b955060808a0135945060a08a0135935060c08a01356148c6816147a5565b8093505060e08a013591506101008a013590509295985092959850929598565b600080600080608085870312156148fc57600080fd5b6149058561484e565b93506020850135925060408501359150606085013561492381614500565b939692955090935050565b6020808252825182820181905260009190848201906040850190845b818110156149665783518352928401929184019160010161494a565b50909695505050505050565b6000806040838503121561498557600080fd5b50508035926020909101359150565b600080600080606085870312156149aa57600080fd5b8435935060208501356149bc81614500565b9250604085013567ffffffffffffffff8111156149d857600080fd5b6149e48782880161475c565b95989497509550505050565b60008060408385031215614a0357600080fd5b8235614a0e81614500565b915060208301356146d181614500565b600181811c90821680614a3257607f821691505b60208210811415614a5357634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215614a6b57600080fd5b815161124e81614500565b600060208284031215614a8857600080fd5b815161124e81614695565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008060408385031215614b0a57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b600082821015614b4357614b43614b1b565b500390565b60008219821115614b5b57614b5b614b1b565b500190565b60008351614b7281846020880161447c565b835190830190614b8681836020880161447c565b01949350505050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6000600019821415614be457614be4614b1b565b5060010190565b60008251614bfd81846020870161447c565b642e6c796e6b60d81b920191825250600501919050565b60008060408385031215614c2757600080fd5b8251614c3281614500565b6020939093015192949293505050565b600060208284031215614c5457600080fd5b5051919050565b6000608082016080835280875480835260a08501915088600052602092508260002060005b82811015614c9c57815484529284019260019182019101614c80565b50505083810382850152614cb081886144a8565b6001600160a01b039690961660408501525050506060015292915050565b600060ff821660ff841680821015614ce857614ce8614b1b565b90039392505050565b6000816000190483118215151615614d0b57614d0b614b1b565b500290565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060208284031215614dbf57600080fd5b815167ffffffffffffffff811115614dd657600080fd5b8201601f81018413614de757600080fd5b8051614df56145be82614588565b818152856020838501011115614e0a57600080fd5b614e1b82602083016020860161447c565b95945050505050565b634e487b7160e01b600052601260045260246000fd5b600082614e4957614e49614e24565b500490565b600082614e5d57614e5d614e24565b500690565b8183823760009101908152919050565b60006001600160801b03808316818516808303821115614b8657614b86614b1b565b81838237642e6c796e6b60d81b9101908152600501919050565b634e487b7160e01b600052602160045260246000fd5b6020808252601d908201527f4c594e4b4e46543a20756e737570706f72746564207061796d656e742e000000604082015260600190565b6040810160048410614f1d57634e487b7160e01b600052602160045260246000fd5b9281526020015290565b600060208284031215614f3957600080fd5b815161124e816147a5565b600181815b80851115614f7f578160001904821115614f6557614f65614b1b565b80851615614f7257918102915b93841c9390800290614f49565b509250929050565b600082614f96575060016105ca565b81614fa3575060006105ca565b8160018114614fb95760028114614fc357614fdf565b60019150506105ca565b60ff841115614fd457614fd4614b1b565b50506001821b6105ca565b5060208310610133831016604e8410600b8410161715615002575081810a6105ca565b61500c8383614f44565b806000190482111561502057615020614b1b565b029392505050565b600061124e8383614f87565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615067908301846144a8565b9695505050505050565b60006020828403121561508357600080fd5b815161124e81614449565b634e487b7160e01b600052603160045260246000fd5b600082516150b681846020870161447c565b919091019291505056fea2646970667358221220acc1057ca289e7d79105e85e38d2b030b2c32e131a76d0bff7822a399876fb8064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c806370a0823111610125578063c87b56dd116100ad578063dcefcebc1161007c578063dcefcebc14610500578063dfa2eec014610520578063e1621a0714610533578063e67e402c14610556578063e985e9c51461056957600080fd5b8063c87b56dd146104b4578063cabaa177146104c7578063cb97200e146104da578063d49cf8e3146104ed57600080fd5b8063a22cb465116100f4578063a22cb46514610449578063a70687ae1461045c578063b6fc133a14610465578063b77c055514610499578063b88d4fde146104a157600080fd5b806370a08231146103ff5780637f6c7bc71461041257806395d89b411461041a5780639ccea0cd1461042257600080fd5b80633f8336e3116101a85780634f6ccce7116101775780634f6ccce7146103a457806355eda4e8146103b757806357e1f309146103c05780636352211e146103e35780636bc3d0a0146103f657600080fd5b80633f8336e31461031757806342842e0e1461036b578063496680761461037e5780634f558e791461039157600080fd5b80630b9b6e8b116101ef5780630b9b6e8b1461029e57806312bf27b0146102cc57806318160ddd146102df57806323b872dd146102f15780632f745c591461030457600080fd5b806301ffc9a71461022157806306fdde0314610249578063081812fc1461025e578063095ea7b314610289575b600080fd5b61023461022f36600461445f565b6105a5565b60405190151581526020015b60405180910390f35b6102516105d0565b60405161024091906144d4565b61027161026c3660046144e7565b610662565b6040516001600160a01b039091168152602001610240565b61029c610297366004614515565b610689565b005b6102346102ac3660046145ee565b805160208183018101805160cc8252928201919093012091525460ff1681565b61029c6102da366004614637565b6107a4565b6099545b604051908152602001610240565b61029c6102ff366004614654565b610a30565b6102e3610312366004614515565b610a61565b61034b6103253660046144e7565b60cd602052600090815260409020546001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610240565b61029c610379366004614654565b610af7565b61023461038c3660046145ee565b610b12565b61023461039f3660046144e7565b610b1d565b6102e36103b23660046144e7565b610b3c565b61027161dead81565b6103c8610bcf565b60408051938452602084019290925290820152606001610240565b6102716103f13660046144e7565b610c9f565b6102e360ce5481565b6102e361040d366004614637565b610cff565b61029c610d85565b610251611030565b6102717f000000000000000000000000000000000000000000000000000000000000000081565b61029c6104573660046146a3565b61103f565b6102e360cf5481565b61034b610473366004614637565b60cb602052600090815260409020546001600160801b0380821691600160801b90041682565b61029c61104e565b61029c6104af3660046146dc565b6111b6565b6102516104c23660046144e7565b6111ee565b61029c6104d53660046147b4565b611255565b61029c6104e8366004614862565b6112d6565b61029c6104fb3660046148e6565b61134c565b61051361050e3660046144e7565b611358565b604051610240919061492e565b6102e361052e366004614972565b6113ba565b610234610541366004614637565b60d06020526000908152604090205460ff1681565b61029c610564366004614994565b6113eb565b6102346105773660046149f0565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b14806105ca57506105ca826113f7565b92915050565b6060606580546105df90614a1e565b80601f016020809104026020016040519081016040528092919081815260200182805461060b90614a1e565b80156106585780601f1061062d57610100808354040283529160200191610658565b820191906000526020600020905b81548152906001019060200180831161063b57829003601f168201915b5050505050905090565b600061066d82611447565b506000908152606960205260409020546001600160a01b031690565b600061069482610c9f565b9050806001600160a01b0316836001600160a01b031614156107075760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061072357506107238133610577565b6107955760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016106fe565b61079f83836114a6565b505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa1785fe6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107fd57600080fd5b505afa158015610811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108359190614a59565b6001600160a01b031663f3c95c60336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561088357600080fd5b505afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb9190614a76565b15806108d6575033600090815260d0602052604090205460ff165b6109335760405162461bcd60e51b815260206004820152602860248201527f4c594e4b4e46543a20706c656173652063616c6c2077697468206561726c794260448201526734b93226b4b73a1760c11b60648201526084016106fe565b6040516354c1498d60e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906354c1498d9060240160206040518083038186803b15801561099457600080fd5b505afa1580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190614a76565b610a245760405162461bcd60e51b815260206004820152602360248201527f4c594e4b4e46543a207265662061646472657373206e6f7420696e20746865206044820152623bb61760e91b60648201526084016106fe565b610a2d81611514565b50565b610a3a3382611b01565b610a565760405162461bcd60e51b81526004016106fe90614a93565b61079f838383611b80565b6000610a6c83610cff565b8210610ace5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106fe565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b61079f838383604051806020016040528060008152506111b6565b60006105ca82611d27565b6000818152606760205260408120546001600160a01b031615156105ca565b6000610b4760995490565b8210610baa5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106fe565b60998281548110610bbd57610bbd614ae1565b90600052602060002001549050919050565b60008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1888116040518163ffffffff1660e01b8152600401604080518083038186803b158015610c2f57600080fd5b505afa158015610c43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c679190614af7565b9092509050610c768282614b31565b945060ce5485610c869190614b31565b935060ce5482610c969190614b48565b92505050909192565b6000818152606760205260408120546001600160a01b0316806105ca5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016106fe565b60006001600160a01b038216610d695760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016106fe565b506001600160a01b031660009081526068602052604090205490565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166354c1498d336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610df457600080fd5b505afa158015610e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2c9190614a76565b80610f4957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa1785fe6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e8b57600080fd5b505afa158015610e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec39190614a59565b6001600160a01b031663f3c95c60336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190614a76565b610f955760405162461bcd60e51b815260206004820152601d60248201527f4c594e4b4e46543a206e6f7420612076616c696420616464726573732e00000060448201526064016106fe565b61102e7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaa2b8c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610ff157600080fd5b505afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110299190614a59565b611514565b565b6060606680546105df90614a1e565b61104a338383611e2b565b5050565b600054610100900460ff161580801561106e5750600054600160ff909116105b806110885750303b158015611088575060005460ff166001145b6110eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106fe565b6000805460ff19166001179055801561110e576000805461ff0019166101001790555b611116611efa565b61111e611f02565b6111666040518060400160405280600781526020016613165392d3919560ca1b8152506040518060400160405280600781526020016613165392d3919560ca1b815250611f29565b61116e611f5a565b8015610a2d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6111c03383611b01565b6111dc5760405162461bcd60e51b81526004016106fe90614a93565b6111e884848484611f62565b50505050565b60606111f982611447565b6000611203611f95565b90506000815111611223576040518060200160405280600081525061124e565b8061122d84612031565b60405160200161123e929190614b60565b6040516020818303038152906040525b9392505050565b60405163d505accf60e01b81526001600160a01b0389169063d505accf9061128d90339030908a908a908a908a908a90600401614b8f565b600060405180830381600087803b1580156112a757600080fd5b505af11580156112bb573d6000803e3d6000fd5b505050506112cb8989898961212f565b505050505050505050565b60405163d505accf60e01b81526001600160a01b0387169063d505accf9061130e90339030908a908a908a908a908a90600401614b8f565b600060405180830381600087803b15801561132857600080fd5b505af115801561133c573d6000803e3d6000fd5b505050506112cb898989896127d1565b6111e8848484846127d1565b600081815260ca60209081526040918290208054835181840281018401909452808452606093928301828280156113ae57602002820191906000526020600020905b81548152602001906001019080831161139a575b50505050509050919050565b60ca60205281600052604060002081815481106113d657600080fd5b90600052602060002001600091509150505481565b6111e88484848461212f565b60006001600160e01b031982166380ac58cd60e01b148061142857506001600160e01b03198216635b5e139f60e01b145b806105ca57506301ffc9a760e01b6001600160e01b03198316146105ca565b6000818152606760205260409020546001600160a01b0316610a2d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016106fe565b600081815260696020526040902080546001600160a01b0319166001600160a01b03841690811790915581906114db82610c9f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ea0d14656040518163ffffffff1660e01b815260040160206040518083038186803b15801561156d57600080fd5b505afa158015611581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a59190614a76565b6115ed5760405162461bcd60e51b8152602060048201526019602482015278262ca725a7232a1d1031b0b73737ba1036b4b73a103cb2ba1760391b60448201526064016106fe565b33600090815260d0602052604090205460ff161561164d5760405162461bcd60e51b815260206004820152601860248201527f4c594e4b4e46543a20616c7265616479206d696e7465642e000000000000000060448201526064016106fe565b33600090815260d060209081526040808320805460ff191660011790558051637d0bc2ff60e11b815290517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169263fa1785fe9260048082019391829003018186803b1580156116c457600080fd5b505afa1580156116d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fc9190614a59565b90506001600160a01b03811663f3c95c60336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561174d57600080fd5b505afa158015611761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117859190614a76565b6117fb576001600160a01b0381166323b3f2a5336040516001600160e01b031960e084901b1681526001600160a01b0391821660048201529085166024820152604401600060405180830381600087803b1580156117e257600080fd5b505af11580156117f6573d6000803e3d6000fd5b505050505b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1888116040518163ffffffff1660e01b8152600401604080518083038186803b15801561185657600080fd5b505afa15801561186a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188e9190614af7565b91509150600060ce54836118a29190614b48565b90508181106118e85760405162461bcd60e51b8152602060048201526012602482015271262ca725a7232a1d1039b7b6321037baba1760711b60448201526064016106fe565b60ce80549060006118f883614bd0565b9190505550600061190882612031565b6040516020016119189190614beb565b60405160208183030381529060405290506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637af0cac36040518163ffffffff1660e01b8152600401604080518083038186803b15801561198457600080fd5b505afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc9190614c14565b915091506119d1826119cb3390565b836132fa565b60405180608001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166364db03b86040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3557600080fd5b505afa158015611a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6d9190614c42565b8152600060208083018290526040808401839052606090930182905287825260ca905220611a9c916004614376565b50611aa733856135a7565b837f43332af98367d01c3bc9be42717917c42e1bd0084f4cdad927e9b4c06471d35160ca6000878152602001908152602001600020858585604051611aef9493929190614c5b565b60405180910390a25050505050505050565b600080611b0d83610c9f565b9050806001600160a01b0316846001600160a01b03161480611b5457506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b80611b785750836001600160a01b0316611b6d84610662565b6001600160a01b0316145b949350505050565b826001600160a01b0316611b9382610c9f565b6001600160a01b031614611bf75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106fe565b6001600160a01b038216611c595760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106fe565b611c648383836135c1565b611c6f6000826114a6565b6001600160a01b0383166000908152606860205260408120805460019290611c98908490614b31565b90915550506001600160a01b0382166000908152606860205260408120805460019290611cc6908490614b48565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60008181805b8251811015611e1e5780158015611d5e5750828181518110611d5157611d51614ae1565b60209101015160f81c6030145b8015611d6b575060008351115b15611d7b57506000949350505050565b6030838281518110611d8f57611d8f614ae1565b016020015160f81c1080611dbc57506039838281518110611db257611db2614ae1565b016020015160f81c115b15611dcc57506000949350505050565b6030838281518110611de057611de0614ae1565b0160200151611df2919060f81c614cce565b60ff16611e0083600a614cf1565b611e0a9190614b48565b915080611e1681614bd0565b915050611d2d565b50620186a0119392505050565b816001600160a01b0316836001600160a01b03161415611e8d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106fe565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610a2d613679565b600054610100900460ff1661102e5760405162461bcd60e51b81526004016106fe90614d10565b600054610100900460ff16611f505760405162461bcd60e51b81526004016106fe90614d10565b61104a82826136bb565b61102e611f02565b611f6d848484611b80565b611f7984848484613709565b6111e85760405162461bcd60e51b81526004016106fe90614d5b565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d547cfb76040518163ffffffff1660e01b815260040160006040518083038186803b158015611ff057600080fd5b505afa158015612004573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261202c9190810190614dad565b905090565b6060816120555750506040805180820190915260018152600360fc1b602082015290565b8160005b811561207f578061206981614bd0565b91506120789050600a83614e3a565b9150612059565b60008167ffffffffffffffff81111561209a5761209a614541565b6040519080825280601f01601f1916602001820160405280156120c4576020820181803683370190505b5090505b8415611b78576120d9600183614b31565b91506120e6600a86614e4e565b6120f1906030614b48565b60f81b81838151811061210657612106614ae1565b60200101906001600160f81b031916908160001a905350612128600a86614e3a565b94506120c8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366227eb96040518163ffffffff1660e01b815260040160206040518083038186803b15801561218857600080fd5b505afa15801561219c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c09190614a76565b6122085760405162461bcd60e51b8152602060048201526019602482015278262ca725a7232a1d1031b0b73737ba1036b4b73a103cb2ba1760391b60448201526064016106fe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa1785fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561226157600080fd5b505afa158015612275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122999190614a59565b6001600160a01b031663f3c95c60336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156122e757600080fd5b505afa1580156122fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231f9190614a76565b61236b5760405162461bcd60e51b815260206004820152601a60248201527f4c594e4b4e46543a206e6f7420612076616c696420757365722e00000000000060448201526064016106fe565b60cc828260405161237d929190614e62565b9081526040519081900360200190205460ff16156123dd5760405162461bcd60e51b815260206004820152601e60248201527f4c594e4b4e46543a206e616d6520616c726561647920696e20757365642e000060448201526064016106fe565b61241c82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d2792505050565b156124695760405162461bcd60e51b815260206004820152601760248201527f4c594e4b4e46543a207265766572736564206e616d652e00000000000000000060448201526064016106fe565b600160cc838360405161247d929190614e62565b908152604051908190036020019020805491151560ff19909216919091179055600060cb816124a93390565b6001600160a01b03908116825260208083019390935260409182016000208251808401845290546001600160801b038082168352600160801b909104168185015282516303ed69ad60e21b815292519094507f000000000000000000000000000000000000000000000000000000000000000090911692630fb5a6b49260048082019391829003018186803b15801561254157600080fd5b505afa158015612555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125799190614c42565b815161258e906001600160801b031642614b31565b106125c2576000602082810182905233825260cb90526040902080546001600160801b031916426001600160801b03161790555b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663600a2f826040518163ffffffff1660e01b815260040160206040518083038186803b15801561261b57600080fd5b505afa15801561262f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126539190614c42565b81602001516001600160801b0316106126ba5760405162461bcd60e51b815260206004820152602360248201527f4c594e4b4e46543a2063616e6e6f74206d696e74206d6f726520696e2061206460448201526230bc9760e91b60648201526084016106fe565b60208101516126ca906001614e72565b33600090815260cb6020526040812080546001600160801b03938416600160801b029316929092179091556126ff8686613816565b905061270b85336119cb565b60008061271733613c75565b91509150604051806080016040528060008152602001838152602001828152602001600081525060ca60008a815260200190815260200160002090600461275f929190614376565b5061276a33896135a7565b877f43332af98367d01c3bc9be42717917c42e1bd0084f4cdad927e9b4c06471d35160ca60008b815260200190815260200160002088886040516020016127b2929190614e94565b60408051601f1981840301815290829052611aef92918c908990614c5b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa1785fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561282a57600080fd5b505afa15801561283e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128629190614a59565b6001600160a01b031663f3c95c60336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156128b057600080fd5b505afa1580156128c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e89190614a76565b6129345760405162461bcd60e51b815260206004820152601a60248201527f4c594e4b4e46543a206e6f7420612076616c696420757365722e00000000000060448201526064016106fe565b323314801561295357503361294884610c9f565b6001600160a01b0316145b6129985760405162461bcd60e51b8152602060048201526016602482015275262ca725a7232a1d103737ba103a34329037bbb732b960511b60448201526064016106fe565b8360038111156129aa576129aa614eae565b612b20577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377b330c96040518163ffffffff1660e01b815260040160206040518083038186803b158015612a0757600080fd5b505afa158015612a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3f9190614a59565b6001600160a01b0316816001600160a01b03161480612aff57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b87436b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ab257600080fd5b505afa158015612ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aea9190614a59565b6001600160a01b0316816001600160a01b0316145b612b1b5760405162461bcd60e51b81526004016106fe90614ec4565b6130ad565b836003811115612b3257612b32614eae565b60011415612d9857600083815260cd60209081526040918290208251808401845290546001600160801b038082168352600160801b909104168183015282516303ed69ad60e21b8152925190926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692630fb5a6b492600480840193829003018186803b158015612bca57600080fd5b505afa158015612bde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c029190614c42565b8151612c17906001600160801b031642614b31565b10612c4b576000602082810182905285825260cd90526040902080546001600160801b0319166001600160801b0342161790555b60405163317369c560e11b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906362e6d38a9060240160206040518083038186803b158015612cab57600080fd5b505afa158015612cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce39190614c42565b8382602001516001600160801b0316612cfc9190614b48565b1115612d595760405162461bcd60e51b815260206004820152602660248201527f4c594e4b4e46543a2063616e6e6f742075706772616465206d6f726520696e2060448201526530903230bc9760d11b60648201526084016106fe565b828160200151612d699190614e72565b600085815260cd6020526040902080546001600160801b03928316600160801b02921691909117905550612fec565b60006001856003811115612dae57612dae614eae565b612db89190614b31565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2cd99af836003811115612dfd57612dfd614eae565b600088815260ca60205260409020805486908110612e1d57612e1d614ae1565b90600052602060002001546040518363ffffffff1660e01b8152600401612e45929190614efb565b604080518083038186803b158015612e5c57600080fd5b505afa158015612e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e949190614af7565b5090506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b2cd99af8960ca60008b81526020019081526020016000208b6003811115612eef57612eef614eae565b81548110612eff57612eff614ae1565b906000526020600020015489612f159190614b48565b6040518363ffffffff1660e01b8152600401612f32929190614efb565b604080518083038186803b158015612f4957600080fd5b505afa158015612f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f819190614af7565b9150915081831180612f9b57508183148015612f9b575080155b612fe75760405162461bcd60e51b815260206004820152601860248201527f4c594e4b4e46543a206c6576656c206f766572666c6f772e000000000000000060448201526064016106fe565b505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2e30dd06040518163ffffffff1660e01b815260040160206040518083038186803b15801561304557600080fd5b505afa158015613059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307d9190614a59565b6001600160a01b0316816001600160a01b0316146130ad5760405162461bcd60e51b81526004016106fe90614ec4565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156130e857600080fd5b505afa1580156130fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131209190614f27565b60ff169050600061313282600a615028565b61313c9085614cf1565b905061314883336119cb565b600085815260ca60205260409020849087600381111561316a5761316a614eae565b8154811061317a5761317a614ae1565b9060005260206000200160008282546131939190614b48565b92505081905550847f6a4348800167e375a04ba455a3563b96544c3d4a8662a4ca79307485fb6dbfc187866040516131cc929190614efb565b60405180910390a27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fa1785fe6040518163ffffffff1660e01b815260040160206040518083038186803b15801561322d57600080fd5b505afa158015613241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132659190614a59565b6001600160a01b031663562afdf53388600381111561328657613286614eae565b15613292576000613294565b865b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156132da57600080fd5b505af11580156132ee573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b038316613363578034146133575760405162461bcd60e51b815260206004820152601c60248201527f62617365436f6e74726163743a20696e76616c69642076616c75652e0000000060448201526064016106fe565b61079f61dead82613d0c565b604051636eb1769f60e11b81526001600160a01b03838116600483015230602483015282919085169063dd62ed3e9060440160206040518083038186803b1580156133ad57600080fd5b505afa1580156133c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e59190614c42565b101561343f5760405162461bcd60e51b8152602060048201526024808201527f62617365436f6e74726163743a20696e73756666696369656e7420616c6c6f77604482015263616e636560e01b60648201526084016106fe565b826001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377b330c96040518163ffffffff1660e01b815260040160206040518083038186803b1580156134a257600080fd5b505afa1580156134b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134da9190614a59565b6001600160a01b031614156135905761079f827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630b00fd546040518163ffffffff1660e01b815260040160206040518083038186803b15801561354657600080fd5b505afa15801561355a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061357e9190614a59565b6001600160a01b038616919084613e25565b61079f6001600160a01b0384168361dead84613e25565b61104a828260405180602001604052806000815250613e7f565b6001600160a01b03831661361c5761361781609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61363f565b816001600160a01b0316836001600160a01b03161461363f5761363f8382613eb2565b6001600160a01b0382166136565761079f81613f4f565b826001600160a01b0316826001600160a01b03161461079f5761079f8282613ffe565b60c954604080516020810192909252429082015244606082015260009060800160408051601f19818403018152919052805160209091012060c9819055919050565b600054610100900460ff166136e25760405162461bcd60e51b81526004016106fe90614d10565b81516136f59060659060208501906143c1565b50805161079f9060669060208401906143c1565b60006001600160a01b0384163b1561380b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061374d903390899088908890600401615034565b602060405180830381600087803b15801561376757600080fd5b505af1925050508015613797575060408051601f3d908101601f1916820190925261379491810190615071565b60015b6137f1573d8080156137c5576040519150601f19603f3d011682016040523d82523d6000602084013e6137ca565b606091505b5080516137e95760405162461bcd60e51b81526004016106fe90614d5b565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611b78565b506001949350505050565b6000816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633b87436b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561387b57600080fd5b505afa15801561388f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b39190614a59565b6001600160a01b031614806139695750816001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377b330c96040518163ffffffff1660e01b815260040160206040518083038186803b15801561392657600080fd5b505afa15801561393a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061395e9190614a59565b6001600160a01b0316145b6139855760405162461bcd60e51b81526004016106fe90614ec4565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156139c057600080fd5b505afa1580156139d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f89190614f27565b60ff1690506000620493e08510613abe57613a1482600a615028565b6040516330c3d99f60e11b8152600260048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636187b33e906024015b60206040518083038186803b158015613a7557600080fd5b505afa158015613a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aad9190614c42565b613ab79190614cf1565b9050613bd0565b62030d408510613b2057613ad382600a615028565b6040516330c3d99f60e11b8152600160048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636187b33e90602401613a5d565b613b2b82600a615028565b6040516330c3d99f60e11b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636187b33e9060240160206040518083038186803b158015613b8b57600080fd5b505afa158015613b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc39190614c42565b613bcd9190614cf1565b90505b620186a0851015613c235760405162461bcd60e51b815260206004820152601a60248201527f4c594e4b4e46543a207265766572736520746f6b656e2069642e00000000000060448201526064016106fe565b62061a808510611b785760405162461bcd60e51b815260206004820152601c60248201527f4c594e4b4e46543a20746f6b656e20696420746f6f206c617267652e0000000060448201526064016106fe565b6000806000613c82613679565b90508084604051602001613cb292919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b60408051601f1981840301815291905280516020909101209050613cda600560ff8316614e4e565b613ce5906001614b48565b9250613cf9600360ff608084901c16614e4e565b613d04906001614b48565b915050915091565b80471015613d5c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106fe565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613da9576040519150601f19603f3d011682016040523d82523d6000602084013e613dae565b606091505b505090508061079f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106fe565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526111e8908590614042565b613e898383614114565b613e966000848484613709565b61079f5760405162461bcd60e51b81526004016106fe90614d5b565b60006001613ebf84610cff565b613ec99190614b31565b600083815260986020526040902054909150808214613f1c576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090613f6190600190614b31565b6000838152609a602052604081205460998054939450909284908110613f8957613f89614ae1565b906000526020600020015490508060998381548110613faa57613faa614ae1565b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480613fe257613fe261508e565b6001900381819060005260206000200160009055905550505050565b600061400983610cff565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6000614097826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142629092919063ffffffff16565b80519091501561079f57808060200190518101906140b59190614a76565b61079f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106fe565b6001600160a01b03821661416a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106fe565b6000818152606760205260409020546001600160a01b0316156141cf5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106fe565b6141db600083836135c1565b6001600160a01b0382166000908152606860205260408120805460019290614204908490614b48565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060611b788484600085856001600160a01b0385163b6142c45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106fe565b600080866001600160a01b031685876040516142e091906150a4565b60006040518083038185875af1925050503d806000811461431d576040519150601f19603f3d011682016040523d82523d6000602084013e614322565b606091505b509150915061433282828661433d565b979650505050505050565b6060831561434c57508161124e565b82511561435c5782518084602001fd5b8160405162461bcd60e51b81526004016106fe91906144d4565b8280548282559060005260206000209081019282156143b1579160200282015b828111156143b1578251825591602001919060010190614396565b506143bd929150614434565b5090565b8280546143cd90614a1e565b90600052602060002090601f0160209004810192826143ef57600085556143b1565b82601f1061440857805160ff19168380011785556143b1565b828001600101855582156143b157918201828111156143b1578251825591602001919060010190614396565b5b808211156143bd5760008155600101614435565b6001600160e01b031981168114610a2d57600080fd5b60006020828403121561447157600080fd5b813561124e81614449565b60005b8381101561449757818101518382015260200161447f565b838111156111e85750506000910152565b600081518084526144c081602086016020860161447c565b601f01601f19169290920160200192915050565b60208152600061124e60208301846144a8565b6000602082840312156144f957600080fd5b5035919050565b6001600160a01b0381168114610a2d57600080fd5b6000806040838503121561452857600080fd5b823561453381614500565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561458057614580614541565b604052919050565b600067ffffffffffffffff8211156145a2576145a2614541565b50601f01601f191660200190565b60006145c36145be84614588565b614557565b90508281528383830111156145d757600080fd5b828260208301376000602084830101529392505050565b60006020828403121561460057600080fd5b813567ffffffffffffffff81111561461757600080fd5b8201601f8101841361462857600080fd5b611b78848235602084016145b0565b60006020828403121561464957600080fd5b813561124e81614500565b60008060006060848603121561466957600080fd5b833561467481614500565b9250602084013561468481614500565b929592945050506040919091013590565b8015158114610a2d57600080fd5b600080604083850312156146b657600080fd5b82356146c181614500565b915060208301356146d181614695565b809150509250929050565b600080600080608085870312156146f257600080fd5b84356146fd81614500565b9350602085013561470d81614500565b925060408501359150606085013567ffffffffffffffff81111561473057600080fd5b8501601f8101871361474157600080fd5b614750878235602084016145b0565b91505092959194509250565b60008083601f84011261476e57600080fd5b50813567ffffffffffffffff81111561478657600080fd5b60208301915083602082850101111561479e57600080fd5b9250929050565b60ff81168114610a2d57600080fd5b60008060008060008060008060006101008a8c0312156147d357600080fd5b8935985060208a01356147e581614500565b975060408a013567ffffffffffffffff81111561480157600080fd5b61480d8c828d0161475c565b90985096505060608a0135945060808a0135935060a08a013561482f816147a5565b8093505060c08a0135915060e08a013590509295985092959850929598565b80356004811061485d57600080fd5b919050565b60008060008060008060008060006101208a8c03121561488157600080fd5b61488a8a61484e565b985060208a0135975060408a0135965060608a01356148a881614500565b955060808a0135945060a08a0135935060c08a01356148c6816147a5565b8093505060e08a013591506101008a013590509295985092959850929598565b600080600080608085870312156148fc57600080fd5b6149058561484e565b93506020850135925060408501359150606085013561492381614500565b939692955090935050565b6020808252825182820181905260009190848201906040850190845b818110156149665783518352928401929184019160010161494a565b50909695505050505050565b6000806040838503121561498557600080fd5b50508035926020909101359150565b600080600080606085870312156149aa57600080fd5b8435935060208501356149bc81614500565b9250604085013567ffffffffffffffff8111156149d857600080fd5b6149e48782880161475c565b95989497509550505050565b60008060408385031215614a0357600080fd5b8235614a0e81614500565b915060208301356146d181614500565b600181811c90821680614a3257607f821691505b60208210811415614a5357634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215614a6b57600080fd5b815161124e81614500565b600060208284031215614a8857600080fd5b815161124e81614695565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008060408385031215614b0a57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b600082821015614b4357614b43614b1b565b500390565b60008219821115614b5b57614b5b614b1b565b500190565b60008351614b7281846020880161447c565b835190830190614b8681836020880161447c565b01949350505050565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6000600019821415614be457614be4614b1b565b5060010190565b60008251614bfd81846020870161447c565b642e6c796e6b60d81b920191825250600501919050565b60008060408385031215614c2757600080fd5b8251614c3281614500565b6020939093015192949293505050565b600060208284031215614c5457600080fd5b5051919050565b6000608082016080835280875480835260a08501915088600052602092508260002060005b82811015614c9c57815484529284019260019182019101614c80565b50505083810382850152614cb081886144a8565b6001600160a01b039690961660408501525050506060015292915050565b600060ff821660ff841680821015614ce857614ce8614b1b565b90039392505050565b6000816000190483118215151615614d0b57614d0b614b1b565b500290565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600060208284031215614dbf57600080fd5b815167ffffffffffffffff811115614dd657600080fd5b8201601f81018413614de757600080fd5b8051614df56145be82614588565b818152856020838501011115614e0a57600080fd5b614e1b82602083016020860161447c565b95945050505050565b634e487b7160e01b600052601260045260246000fd5b600082614e4957614e49614e24565b500490565b600082614e5d57614e5d614e24565b500690565b8183823760009101908152919050565b60006001600160801b03808316818516808303821115614b8657614b86614b1b565b81838237642e6c796e6b60d81b9101908152600501919050565b634e487b7160e01b600052602160045260246000fd5b6020808252601d908201527f4c594e4b4e46543a20756e737570706f72746564207061796d656e742e000000604082015260600190565b6040810160048410614f1d57634e487b7160e01b600052602160045260246000fd5b9281526020015290565b600060208284031215614f3957600080fd5b815161124e816147a5565b600181815b80851115614f7f578160001904821115614f6557614f65614b1b565b80851615614f7257918102915b93841c9390800290614f49565b509250929050565b600082614f96575060016105ca565b81614fa3575060006105ca565b8160018114614fb95760028114614fc357614fdf565b60019150506105ca565b60ff841115614fd457614fd4614b1b565b50506001821b6105ca565b5060208310610133831016604e8410600b8410161715615002575081810a6105ca565b61500c8383614f44565b806000190482111561502057615020614b1b565b029392505050565b600061124e8383614f87565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615067908301846144a8565b9695505050505050565b60006020828403121561508357600080fd5b815161124e81614449565b634e487b7160e01b600052603160045260246000fd5b600082516150b681846020870161447c565b919091019291505056fea2646970667358221220acc1057ca289e7d79105e85e38d2b030b2c32e131a76d0bff7822a399876fb8064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3289,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4171,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1592,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1594,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1598,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1602,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1606,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1612,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2454,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 2619,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2623,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2626,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2630,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2946,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 8574,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "randomSeed",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 8579,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "nftInfo",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 8584,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "mintInfoOf",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_struct(MintInfo)8628_storage)"
      },
      {
        "astId": 8588,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "nameUsed",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 8593,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "addedVAInfoOf",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_uint256,t_struct(AttributeAddedInfo)8633_storage)"
      },
      {
        "astId": 8595,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "earlyBirdCounter",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 8597,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "earlyBirdWlCounter",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 8601,
        "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
        "label": "earlyBirdMintedOf",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(MintInfo)8628_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LYNKNFT.MintInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MintInfo)8628_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(AttributeAddedInfo)8633_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LYNKNFT.AttributeAddedInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AttributeAddedInfo)8633_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AttributeAddedInfo)8633_storage": {
        "encoding": "inplace",
        "label": "struct LYNKNFT.AttributeAddedInfo",
        "members": [
          {
            "astId": 8630,
            "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
            "label": "lastAddedTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 8632,
            "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
            "label": "addedInDuration",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(MintInfo)8628_storage": {
        "encoding": "inplace",
        "label": "struct LYNKNFT.MintInfo",
        "members": [
          {
            "astId": 8625,
            "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
            "label": "lastMintTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 8627,
            "contract": "contracts/token/LYNKNFT.sol:LYNKNFT",
            "label": "mintNumInDuration",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}